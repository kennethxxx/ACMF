//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18444
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace IPS.BPELInvoker {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BPELInvoker.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InvokeBPEL", ReplyAction="http://tempuri.org/IService1/InvokeBPELResponse")]
        System.IAsyncResult BeginInvokeBPEL(string UserID, string functionName, string data, string DriverOption, System.AsyncCallback callback, object asyncState);
        
        string EndInvokeBPEL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/BPELTest", ReplyAction="http://tempuri.org/IService1/BPELTestResponse")]
        System.IAsyncResult BeginBPELTest(string user, string data, System.AsyncCallback callback, object asyncState);
        
        string EndBPELTest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : IPS.BPELInvoker.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InvokeBPELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InvokeBPELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BPELTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BPELTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<IPS.BPELInvoker.IService1>, IPS.BPELInvoker.IService1 {
        
        private BeginOperationDelegate onBeginInvokeBPELDelegate;
        
        private EndOperationDelegate onEndInvokeBPELDelegate;
        
        private System.Threading.SendOrPostCallback onInvokeBPELCompletedDelegate;
        
        private BeginOperationDelegate onBeginBPELTestDelegate;
        
        private EndOperationDelegate onEndBPELTestDelegate;
        
        private System.Threading.SendOrPostCallback onBPELTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<InvokeBPELCompletedEventArgs> InvokeBPELCompleted;
        
        public event System.EventHandler<BPELTestCompletedEventArgs> BPELTestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.BPELInvoker.IService1.BeginInvokeBPEL(string UserID, string functionName, string data, string DriverOption, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvokeBPEL(UserID, functionName, data, DriverOption, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.BPELInvoker.IService1.EndInvokeBPEL(System.IAsyncResult result) {
            return base.Channel.EndInvokeBPEL(result);
        }
        
        private System.IAsyncResult OnBeginInvokeBPEL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserID = ((string)(inValues[0]));
            string functionName = ((string)(inValues[1]));
            string data = ((string)(inValues[2]));
            string DriverOption = ((string)(inValues[3]));
            return ((IPS.BPELInvoker.IService1)(this)).BeginInvokeBPEL(UserID, functionName, data, DriverOption, callback, asyncState);
        }
        
        private object[] OnEndInvokeBPEL(System.IAsyncResult result) {
            string retVal = ((IPS.BPELInvoker.IService1)(this)).EndInvokeBPEL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInvokeBPELCompleted(object state) {
            if ((this.InvokeBPELCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvokeBPELCompleted(this, new InvokeBPELCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvokeBPELAsync(string UserID, string functionName, string data, string DriverOption) {
            this.InvokeBPELAsync(UserID, functionName, data, DriverOption, null);
        }
        
        public void InvokeBPELAsync(string UserID, string functionName, string data, string DriverOption, object userState) {
            if ((this.onBeginInvokeBPELDelegate == null)) {
                this.onBeginInvokeBPELDelegate = new BeginOperationDelegate(this.OnBeginInvokeBPEL);
            }
            if ((this.onEndInvokeBPELDelegate == null)) {
                this.onEndInvokeBPELDelegate = new EndOperationDelegate(this.OnEndInvokeBPEL);
            }
            if ((this.onInvokeBPELCompletedDelegate == null)) {
                this.onInvokeBPELCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvokeBPELCompleted);
            }
            base.InvokeAsync(this.onBeginInvokeBPELDelegate, new object[] {
                        UserID,
                        functionName,
                        data,
                        DriverOption}, this.onEndInvokeBPELDelegate, this.onInvokeBPELCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.BPELInvoker.IService1.BeginBPELTest(string user, string data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBPELTest(user, data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.BPELInvoker.IService1.EndBPELTest(System.IAsyncResult result) {
            return base.Channel.EndBPELTest(result);
        }
        
        private System.IAsyncResult OnBeginBPELTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string data = ((string)(inValues[1]));
            return ((IPS.BPELInvoker.IService1)(this)).BeginBPELTest(user, data, callback, asyncState);
        }
        
        private object[] OnEndBPELTest(System.IAsyncResult result) {
            string retVal = ((IPS.BPELInvoker.IService1)(this)).EndBPELTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBPELTestCompleted(object state) {
            if ((this.BPELTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BPELTestCompleted(this, new BPELTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BPELTestAsync(string user, string data) {
            this.BPELTestAsync(user, data, null);
        }
        
        public void BPELTestAsync(string user, string data, object userState) {
            if ((this.onBeginBPELTestDelegate == null)) {
                this.onBeginBPELTestDelegate = new BeginOperationDelegate(this.OnBeginBPELTest);
            }
            if ((this.onEndBPELTestDelegate == null)) {
                this.onEndBPELTestDelegate = new EndOperationDelegate(this.OnEndBPELTest);
            }
            if ((this.onBPELTestCompletedDelegate == null)) {
                this.onBPELTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBPELTestCompleted);
            }
            base.InvokeAsync(this.onBeginBPELTestDelegate, new object[] {
                        user,
                        data}, this.onEndBPELTestDelegate, this.onBPELTestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPS.BPELInvoker.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<IPS.BPELInvoker.IService1>, IPS.BPELInvoker.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<IPS.BPELInvoker.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginInvokeBPEL(string UserID, string functionName, string data, string DriverOption, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = UserID;
                _args[1] = functionName;
                _args[2] = data;
                _args[3] = DriverOption;
                System.IAsyncResult _result = base.BeginInvoke("InvokeBPEL", _args, callback, asyncState);
                return _result;
            }
            
            public string EndInvokeBPEL(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("InvokeBPEL", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBPELTest(string user, string data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = user;
                _args[1] = data;
                System.IAsyncResult _result = base.BeginInvoke("BPELTest", _args, callback, asyncState);
                return _result;
            }
            
            public string EndBPELTest(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("BPELTest", _args, result)));
                return _result;
            }
        }
    }
}
