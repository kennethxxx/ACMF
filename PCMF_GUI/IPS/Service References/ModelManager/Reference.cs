//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.269
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace IPS.ModelManager {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelStorationInformation", Namespace="http://schemas.datacontract.org/2004/07/ModelManagementServices")]
    public partial class ModelStorationInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNCTypeField;
        
        private string COMPANYField;
        
        private string PKField;
        
        private string ProductIDField;
        
        private string ServiceBrokerIDField;
        
        private string cnc_numberField;
        
        private System.DateTime createTimeField;
        
        private string createUserField;
        
        private System.DateTime dataEndTimeField;
        
        private System.DateTime dataStartTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<double> matSizeListField;
        
        private double modelSizeField;
        
        private string vMachineIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNCType {
            get {
                return this.CNCTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CNCTypeField, value) != true)) {
                    this.CNCTypeField = value;
                    this.RaisePropertyChanged("CNCType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANY {
            get {
                return this.COMPANYField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYField, value) != true)) {
                    this.COMPANYField = value;
                    this.RaisePropertyChanged("COMPANY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PK {
            get {
                return this.PKField;
            }
            set {
                if ((object.ReferenceEquals(this.PKField, value) != true)) {
                    this.PKField = value;
                    this.RaisePropertyChanged("PK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceBrokerID {
            get {
                return this.ServiceBrokerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceBrokerIDField, value) != true)) {
                    this.ServiceBrokerIDField = value;
                    this.RaisePropertyChanged("ServiceBrokerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cnc_number {
            get {
                return this.cnc_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.cnc_numberField, value) != true)) {
                    this.cnc_numberField = value;
                    this.RaisePropertyChanged("cnc_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime createTime {
            get {
                return this.createTimeField;
            }
            set {
                if ((this.createTimeField.Equals(value) != true)) {
                    this.createTimeField = value;
                    this.RaisePropertyChanged("createTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string createUser {
            get {
                return this.createUserField;
            }
            set {
                if ((object.ReferenceEquals(this.createUserField, value) != true)) {
                    this.createUserField = value;
                    this.RaisePropertyChanged("createUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataEndTime {
            get {
                return this.dataEndTimeField;
            }
            set {
                if ((this.dataEndTimeField.Equals(value) != true)) {
                    this.dataEndTimeField = value;
                    this.RaisePropertyChanged("dataEndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataStartTime {
            get {
                return this.dataStartTimeField;
            }
            set {
                if ((this.dataStartTimeField.Equals(value) != true)) {
                    this.dataStartTimeField = value;
                    this.RaisePropertyChanged("dataStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<double> matSizeList {
            get {
                return this.matSizeListField;
            }
            set {
                if ((object.ReferenceEquals(this.matSizeListField, value) != true)) {
                    this.matSizeListField = value;
                    this.RaisePropertyChanged("matSizeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double modelSize {
            get {
                return this.modelSizeField;
            }
            set {
                if ((this.modelSizeField.Equals(value) != true)) {
                    this.modelSizeField = value;
                    this.RaisePropertyChanged("modelSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineID {
            get {
                return this.vMachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIDField, value) != true)) {
                    this.vMachineIDField = value;
                    this.RaisePropertyChanged("vMachineID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelInformation", Namespace="http://schemas.datacontract.org/2004/07/ModelManagementServices")]
    public partial class ModelInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNCTypeField;
        
        private string COMPANYField;
        
        private string ModelIDField;
        
        private string PKField;
        
        private string ProductIDField;
        
        private string ServiceBrokerIDField;
        
        private string cnc_numberField;
        
        private System.DateTime createTimeField;
        
        private string createUserField;
        
        private System.DateTime dataEndTimeField;
        
        private System.DateTime dataStartTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<double> matSizeListField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> modelNameListField;
        
        private double modelSizeField;
        
        private string vMachineIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNCType {
            get {
                return this.CNCTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CNCTypeField, value) != true)) {
                    this.CNCTypeField = value;
                    this.RaisePropertyChanged("CNCType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANY {
            get {
                return this.COMPANYField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYField, value) != true)) {
                    this.COMPANYField = value;
                    this.RaisePropertyChanged("COMPANY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelID {
            get {
                return this.ModelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelIDField, value) != true)) {
                    this.ModelIDField = value;
                    this.RaisePropertyChanged("ModelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PK {
            get {
                return this.PKField;
            }
            set {
                if ((object.ReferenceEquals(this.PKField, value) != true)) {
                    this.PKField = value;
                    this.RaisePropertyChanged("PK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceBrokerID {
            get {
                return this.ServiceBrokerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceBrokerIDField, value) != true)) {
                    this.ServiceBrokerIDField = value;
                    this.RaisePropertyChanged("ServiceBrokerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cnc_number {
            get {
                return this.cnc_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.cnc_numberField, value) != true)) {
                    this.cnc_numberField = value;
                    this.RaisePropertyChanged("cnc_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime createTime {
            get {
                return this.createTimeField;
            }
            set {
                if ((this.createTimeField.Equals(value) != true)) {
                    this.createTimeField = value;
                    this.RaisePropertyChanged("createTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string createUser {
            get {
                return this.createUserField;
            }
            set {
                if ((object.ReferenceEquals(this.createUserField, value) != true)) {
                    this.createUserField = value;
                    this.RaisePropertyChanged("createUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataEndTime {
            get {
                return this.dataEndTimeField;
            }
            set {
                if ((this.dataEndTimeField.Equals(value) != true)) {
                    this.dataEndTimeField = value;
                    this.RaisePropertyChanged("dataEndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataStartTime {
            get {
                return this.dataStartTimeField;
            }
            set {
                if ((this.dataStartTimeField.Equals(value) != true)) {
                    this.dataStartTimeField = value;
                    this.RaisePropertyChanged("dataStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<double> matSizeList {
            get {
                return this.matSizeListField;
            }
            set {
                if ((object.ReferenceEquals(this.matSizeListField, value) != true)) {
                    this.matSizeListField = value;
                    this.RaisePropertyChanged("matSizeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> modelNameList {
            get {
                return this.modelNameListField;
            }
            set {
                if ((object.ReferenceEquals(this.modelNameListField, value) != true)) {
                    this.modelNameListField = value;
                    this.RaisePropertyChanged("modelNameList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double modelSize {
            get {
                return this.modelSizeField;
            }
            set {
                if ((this.modelSizeField.Equals(value) != true)) {
                    this.modelSizeField = value;
                    this.RaisePropertyChanged("modelSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineID {
            get {
                return this.vMachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIDField, value) != true)) {
                    this.vMachineIDField = value;
                    this.RaisePropertyChanged("vMachineID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanOutEquipmentInformation", Namespace="http://schemas.datacontract.org/2004/07/ModelManagementServices")]
    public partial class FanOutEquipmentInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string equipmentNameField;
        
        private string vMachineNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmentName {
            get {
                return this.equipmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentNameField, value) != true)) {
                    this.equipmentNameField = value;
                    this.RaisePropertyChanged("equipmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineName {
            get {
                return this.vMachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineNameField, value) != true)) {
                    this.vMachineNameField = value;
                    this.RaisePropertyChanged("vMachineName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelFull", Namespace="http://schemas.datacontract.org/2004/07/ServiceBroker")]
    public partial class ModelFull : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<string> equipmentListField;
        
        private IPS.ModelManager.Model modelField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> vMachineListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> equipmentList {
            get {
                return this.equipmentListField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentListField, value) != true)) {
                    this.equipmentListField = value;
                    this.RaisePropertyChanged("equipmentList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IPS.ModelManager.Model model {
            get {
                return this.modelField;
            }
            set {
                if ((object.ReferenceEquals(this.modelField, value) != true)) {
                    this.modelField = value;
                    this.RaisePropertyChanged("model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> vMachineList {
            get {
                return this.vMachineListField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineListField, value) != true)) {
                    this.vMachineListField = value;
                    this.RaisePropertyChanged("vMachineList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Model", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Model : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string COMPANYField;
        
        private string CodeIDField;
        
        private string G_CodeField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_LCLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_LSLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_UCLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_USLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_LCLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_LSLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_TargetField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_UCLField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_USLField;
        
        private string MetrologyItemField;
        
        private string Model_IDField;
        
        private string PKField;
        
        private string PostYType_1Field;
        
        private string PostYType_2Field;
        
        private string VersionField;
        
        private string cncTypeField;
        
        private string cnc_numberField;
        
        private System.DateTime createTimeField;
        
        private string createUserField;
        
        private System.DateTime dataEndTimeField;
        
        private System.DateTime dataStartTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> indicatorField;
        
        private System.DateTime indicatorEndDateField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> indicatorIndexListField;
        
        private System.DateTime indicatorStartDateField;
        
        private System.Collections.ObjectModel.ObservableCollection<double> matSizeListField;
        
        private System.DateTime modelCreateDateField;
        
        private string modelCreateUserField;
        
        private string modelIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelItem> modelItemField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> modelNameListField;
        
        private double modelSizeField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> pointIndexListField;
        
        private string positionField;
        
        private string producttypeField;
        
        private string seat_numberField;
        
        private string sensorField;
        
        private string vMachineIDField;
        
        private string vMachineNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COMPANY {
            get {
                return this.COMPANYField;
            }
            set {
                if ((object.ReferenceEquals(this.COMPANYField, value) != true)) {
                    this.COMPANYField = value;
                    this.RaisePropertyChanged("COMPANY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodeID {
            get {
                return this.CodeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeIDField, value) != true)) {
                    this.CodeIDField = value;
                    this.RaisePropertyChanged("CodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string G_Code {
            get {
                return this.G_CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.G_CodeField, value) != true)) {
                    this.G_CodeField = value;
                    this.RaisePropertyChanged("G_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_LCL {
            get {
                return this.IndicatorSpec_LCLField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatorSpec_LCLField, value) != true)) {
                    this.IndicatorSpec_LCLField = value;
                    this.RaisePropertyChanged("IndicatorSpec_LCL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_LSL {
            get {
                return this.IndicatorSpec_LSLField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatorSpec_LSLField, value) != true)) {
                    this.IndicatorSpec_LSLField = value;
                    this.RaisePropertyChanged("IndicatorSpec_LSL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_UCL {
            get {
                return this.IndicatorSpec_UCLField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatorSpec_UCLField, value) != true)) {
                    this.IndicatorSpec_UCLField = value;
                    this.RaisePropertyChanged("IndicatorSpec_UCL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> IndicatorSpec_USL {
            get {
                return this.IndicatorSpec_USLField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatorSpec_USLField, value) != true)) {
                    this.IndicatorSpec_USLField = value;
                    this.RaisePropertyChanged("IndicatorSpec_USL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_LCL {
            get {
                return this.MeasureSpec_LCLField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureSpec_LCLField, value) != true)) {
                    this.MeasureSpec_LCLField = value;
                    this.RaisePropertyChanged("MeasureSpec_LCL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_LSL {
            get {
                return this.MeasureSpec_LSLField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureSpec_LSLField, value) != true)) {
                    this.MeasureSpec_LSLField = value;
                    this.RaisePropertyChanged("MeasureSpec_LSL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_Target {
            get {
                return this.MeasureSpec_TargetField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureSpec_TargetField, value) != true)) {
                    this.MeasureSpec_TargetField = value;
                    this.RaisePropertyChanged("MeasureSpec_Target");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_UCL {
            get {
                return this.MeasureSpec_UCLField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureSpec_UCLField, value) != true)) {
                    this.MeasureSpec_UCLField = value;
                    this.RaisePropertyChanged("MeasureSpec_UCL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> MeasureSpec_USL {
            get {
                return this.MeasureSpec_USLField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureSpec_USLField, value) != true)) {
                    this.MeasureSpec_USLField = value;
                    this.RaisePropertyChanged("MeasureSpec_USL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetrologyItem {
            get {
                return this.MetrologyItemField;
            }
            set {
                if ((object.ReferenceEquals(this.MetrologyItemField, value) != true)) {
                    this.MetrologyItemField = value;
                    this.RaisePropertyChanged("MetrologyItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model_ID {
            get {
                return this.Model_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Model_IDField, value) != true)) {
                    this.Model_IDField = value;
                    this.RaisePropertyChanged("Model_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PK {
            get {
                return this.PKField;
            }
            set {
                if ((object.ReferenceEquals(this.PKField, value) != true)) {
                    this.PKField = value;
                    this.RaisePropertyChanged("PK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostYType_1 {
            get {
                return this.PostYType_1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PostYType_1Field, value) != true)) {
                    this.PostYType_1Field = value;
                    this.RaisePropertyChanged("PostYType_1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostYType_2 {
            get {
                return this.PostYType_2Field;
            }
            set {
                if ((object.ReferenceEquals(this.PostYType_2Field, value) != true)) {
                    this.PostYType_2Field = value;
                    this.RaisePropertyChanged("PostYType_2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cncType {
            get {
                return this.cncTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.cncTypeField, value) != true)) {
                    this.cncTypeField = value;
                    this.RaisePropertyChanged("cncType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cnc_number {
            get {
                return this.cnc_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.cnc_numberField, value) != true)) {
                    this.cnc_numberField = value;
                    this.RaisePropertyChanged("cnc_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime createTime {
            get {
                return this.createTimeField;
            }
            set {
                if ((this.createTimeField.Equals(value) != true)) {
                    this.createTimeField = value;
                    this.RaisePropertyChanged("createTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string createUser {
            get {
                return this.createUserField;
            }
            set {
                if ((object.ReferenceEquals(this.createUserField, value) != true)) {
                    this.createUserField = value;
                    this.RaisePropertyChanged("createUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataEndTime {
            get {
                return this.dataEndTimeField;
            }
            set {
                if ((this.dataEndTimeField.Equals(value) != true)) {
                    this.dataEndTimeField = value;
                    this.RaisePropertyChanged("dataEndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataStartTime {
            get {
                return this.dataStartTimeField;
            }
            set {
                if ((this.dataStartTimeField.Equals(value) != true)) {
                    this.dataStartTimeField = value;
                    this.RaisePropertyChanged("dataStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> indicator {
            get {
                return this.indicatorField;
            }
            set {
                if ((object.ReferenceEquals(this.indicatorField, value) != true)) {
                    this.indicatorField = value;
                    this.RaisePropertyChanged("indicator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime indicatorEndDate {
            get {
                return this.indicatorEndDateField;
            }
            set {
                if ((this.indicatorEndDateField.Equals(value) != true)) {
                    this.indicatorEndDateField = value;
                    this.RaisePropertyChanged("indicatorEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> indicatorIndexList {
            get {
                return this.indicatorIndexListField;
            }
            set {
                if ((object.ReferenceEquals(this.indicatorIndexListField, value) != true)) {
                    this.indicatorIndexListField = value;
                    this.RaisePropertyChanged("indicatorIndexList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime indicatorStartDate {
            get {
                return this.indicatorStartDateField;
            }
            set {
                if ((this.indicatorStartDateField.Equals(value) != true)) {
                    this.indicatorStartDateField = value;
                    this.RaisePropertyChanged("indicatorStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<double> matSizeList {
            get {
                return this.matSizeListField;
            }
            set {
                if ((object.ReferenceEquals(this.matSizeListField, value) != true)) {
                    this.matSizeListField = value;
                    this.RaisePropertyChanged("matSizeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime modelCreateDate {
            get {
                return this.modelCreateDateField;
            }
            set {
                if ((this.modelCreateDateField.Equals(value) != true)) {
                    this.modelCreateDateField = value;
                    this.RaisePropertyChanged("modelCreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string modelCreateUser {
            get {
                return this.modelCreateUserField;
            }
            set {
                if ((object.ReferenceEquals(this.modelCreateUserField, value) != true)) {
                    this.modelCreateUserField = value;
                    this.RaisePropertyChanged("modelCreateUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string modelID {
            get {
                return this.modelIDField;
            }
            set {
                if ((object.ReferenceEquals(this.modelIDField, value) != true)) {
                    this.modelIDField = value;
                    this.RaisePropertyChanged("modelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelItem> modelItem {
            get {
                return this.modelItemField;
            }
            set {
                if ((object.ReferenceEquals(this.modelItemField, value) != true)) {
                    this.modelItemField = value;
                    this.RaisePropertyChanged("modelItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> modelNameList {
            get {
                return this.modelNameListField;
            }
            set {
                if ((object.ReferenceEquals(this.modelNameListField, value) != true)) {
                    this.modelNameListField = value;
                    this.RaisePropertyChanged("modelNameList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double modelSize {
            get {
                return this.modelSizeField;
            }
            set {
                if ((this.modelSizeField.Equals(value) != true)) {
                    this.modelSizeField = value;
                    this.RaisePropertyChanged("modelSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> pointIndexList {
            get {
                return this.pointIndexListField;
            }
            set {
                if ((object.ReferenceEquals(this.pointIndexListField, value) != true)) {
                    this.pointIndexListField = value;
                    this.RaisePropertyChanged("pointIndexList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string position {
            get {
                return this.positionField;
            }
            set {
                if ((object.ReferenceEquals(this.positionField, value) != true)) {
                    this.positionField = value;
                    this.RaisePropertyChanged("position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string producttype {
            get {
                return this.producttypeField;
            }
            set {
                if ((object.ReferenceEquals(this.producttypeField, value) != true)) {
                    this.producttypeField = value;
                    this.RaisePropertyChanged("producttype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string seat_number {
            get {
                return this.seat_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.seat_numberField, value) != true)) {
                    this.seat_numberField = value;
                    this.RaisePropertyChanged("seat_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sensor {
            get {
                return this.sensorField;
            }
            set {
                if ((object.ReferenceEquals(this.sensorField, value) != true)) {
                    this.sensorField = value;
                    this.RaisePropertyChanged("sensor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineID {
            get {
                return this.vMachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIDField, value) != true)) {
                    this.vMachineIDField = value;
                    this.RaisePropertyChanged("vMachineID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineName {
            get {
                return this.vMachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineNameField, value) != true)) {
                    this.vMachineNameField = value;
                    this.RaisePropertyChanged("vMachineName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ModelItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] modelBytesField;
        
        private string modelNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] modelBytes {
            get {
                return this.modelBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.modelBytesField, value) != true)) {
                    this.modelBytesField = value;
                    this.RaisePropertyChanged("modelBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string modelName {
            get {
                return this.modelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.modelNameField, value) != true)) {
                    this.modelNameField = value;
                    this.RaisePropertyChanged("modelName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Model_SendContent", Namespace="http://schemas.datacontract.org/2004/07/ModelManagementServices")]
    public partial class Model_SendContent : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNCIDField;
        
        private string CompanyField;
        
        private string PKField;
        
        private string ServiceBrokerIDField;
        
        private string vMachineIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNCID {
            get {
                return this.CNCIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CNCIDField, value) != true)) {
                    this.CNCIDField = value;
                    this.RaisePropertyChanged("CNCID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PK {
            get {
                return this.PKField;
            }
            set {
                if ((object.ReferenceEquals(this.PKField, value) != true)) {
                    this.PKField = value;
                    this.RaisePropertyChanged("PK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceBrokerID {
            get {
                return this.ServiceBrokerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceBrokerIDField, value) != true)) {
                    this.ServiceBrokerIDField = value;
                    this.RaisePropertyChanged("ServiceBrokerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineID {
            get {
                return this.vMachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIDField, value) != true)) {
                    this.vMachineIDField = value;
                    this.RaisePropertyChanged("vMachineID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelFilterParameters", Namespace="http://schemas.datacontract.org/2004/07/ModelManagementServices")]
    public partial class ModelFilterParameters : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<string> ProductIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> ServiceBrokerIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> cnc_numberField;
        
        private System.DateTime modelEndDateField;
        
        private System.DateTime modelStartDateField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> vMachineIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIDField, value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ServiceBrokerID {
            get {
                return this.ServiceBrokerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceBrokerIDField, value) != true)) {
                    this.ServiceBrokerIDField = value;
                    this.RaisePropertyChanged("ServiceBrokerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> cnc_number {
            get {
                return this.cnc_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.cnc_numberField, value) != true)) {
                    this.cnc_numberField = value;
                    this.RaisePropertyChanged("cnc_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime modelEndDate {
            get {
                return this.modelEndDateField;
            }
            set {
                if ((this.modelEndDateField.Equals(value) != true)) {
                    this.modelEndDateField = value;
                    this.RaisePropertyChanged("modelEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime modelStartDate {
            get {
                return this.modelStartDateField;
            }
            set {
                if ((this.modelStartDateField.Equals(value) != true)) {
                    this.modelStartDateField = value;
                    this.RaisePropertyChanged("modelStartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> vMachineID {
            get {
                return this.vMachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIDField, value) != true)) {
                    this.vMachineIDField = value;
                    this.RaisePropertyChanged("vMachineID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vmachine", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Vmachine : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Equipment> equipmentListField;
        
        private System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Equipment1> equipmentList1Field;
        
        private string vMachineIdField;
        
        private string vMachineIpField;
        
        private string vMachineIp1Field;
        
        private string vMachine_StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Equipment> equipmentList {
            get {
                return this.equipmentListField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentListField, value) != true)) {
                    this.equipmentListField = value;
                    this.RaisePropertyChanged("equipmentList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Equipment1> equipmentList1 {
            get {
                return this.equipmentList1Field;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentList1Field, value) != true)) {
                    this.equipmentList1Field = value;
                    this.RaisePropertyChanged("equipmentList1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineId {
            get {
                return this.vMachineIdField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIdField, value) != true)) {
                    this.vMachineIdField = value;
                    this.RaisePropertyChanged("vMachineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineIp {
            get {
                return this.vMachineIpField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIpField, value) != true)) {
                    this.vMachineIpField = value;
                    this.RaisePropertyChanged("vMachineIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachineIp1 {
            get {
                return this.vMachineIp1Field;
            }
            set {
                if ((object.ReferenceEquals(this.vMachineIp1Field, value) != true)) {
                    this.vMachineIp1Field = value;
                    this.RaisePropertyChanged("vMachineIp1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vMachine_State {
            get {
                return this.vMachine_StateField;
            }
            set {
                if ((object.ReferenceEquals(this.vMachine_StateField, value) != true)) {
                    this.vMachine_StateField = value;
                    this.RaisePropertyChanged("vMachine_State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Equipment", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Equipment : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IPv4Field;
        
        private string IPv4SubnetMaskField;
        
        private string equimentControllerTypeField;
        
        private string equipmenNoField;
        
        private string equipmenPictureNameField;
        
        private string equipmenTypeField;
        
        private string equipmentIpField;
        
        private string equipmentLocationField;
        
        private byte[] equipmentPictureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPv4 {
            get {
                return this.IPv4Field;
            }
            set {
                if ((object.ReferenceEquals(this.IPv4Field, value) != true)) {
                    this.IPv4Field = value;
                    this.RaisePropertyChanged("IPv4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPv4SubnetMask {
            get {
                return this.IPv4SubnetMaskField;
            }
            set {
                if ((object.ReferenceEquals(this.IPv4SubnetMaskField, value) != true)) {
                    this.IPv4SubnetMaskField = value;
                    this.RaisePropertyChanged("IPv4SubnetMask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equimentControllerType {
            get {
                return this.equimentControllerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.equimentControllerTypeField, value) != true)) {
                    this.equimentControllerTypeField = value;
                    this.RaisePropertyChanged("equimentControllerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmenNo {
            get {
                return this.equipmenNoField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmenNoField, value) != true)) {
                    this.equipmenNoField = value;
                    this.RaisePropertyChanged("equipmenNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmenPictureName {
            get {
                return this.equipmenPictureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmenPictureNameField, value) != true)) {
                    this.equipmenPictureNameField = value;
                    this.RaisePropertyChanged("equipmenPictureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmenType {
            get {
                return this.equipmenTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmenTypeField, value) != true)) {
                    this.equipmenTypeField = value;
                    this.RaisePropertyChanged("equipmenType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmentIp {
            get {
                return this.equipmentIpField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentIpField, value) != true)) {
                    this.equipmentIpField = value;
                    this.RaisePropertyChanged("equipmentIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmentLocation {
            get {
                return this.equipmentLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentLocationField, value) != true)) {
                    this.equipmentLocationField = value;
                    this.RaisePropertyChanged("equipmentLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] equipmentPicture {
            get {
                return this.equipmentPictureField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentPictureField, value) != true)) {
                    this.equipmentPictureField = value;
                    this.RaisePropertyChanged("equipmentPicture");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Equipment1", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Equipment1 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Cnc_StateField;
        
        private string IPv4Field;
        
        private string IPv4SubnetMaskField;
        
        private string Service_StatusField;
        
        private string equimentControllerTypeField;
        
        private string equipmenNoField;
        
        private string equipmenPictureNameField;
        
        private string equipmenTypeField;
        
        private string equipmentIpField;
        
        private string equipmentLocationField;
        
        private byte[] equipmentPictureField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cnc_State {
            get {
                return this.Cnc_StateField;
            }
            set {
                if ((object.ReferenceEquals(this.Cnc_StateField, value) != true)) {
                    this.Cnc_StateField = value;
                    this.RaisePropertyChanged("Cnc_State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPv4 {
            get {
                return this.IPv4Field;
            }
            set {
                if ((object.ReferenceEquals(this.IPv4Field, value) != true)) {
                    this.IPv4Field = value;
                    this.RaisePropertyChanged("IPv4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPv4SubnetMask {
            get {
                return this.IPv4SubnetMaskField;
            }
            set {
                if ((object.ReferenceEquals(this.IPv4SubnetMaskField, value) != true)) {
                    this.IPv4SubnetMaskField = value;
                    this.RaisePropertyChanged("IPv4SubnetMask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Service_Status {
            get {
                return this.Service_StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.Service_StatusField, value) != true)) {
                    this.Service_StatusField = value;
                    this.RaisePropertyChanged("Service_Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equimentControllerType {
            get {
                return this.equimentControllerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.equimentControllerTypeField, value) != true)) {
                    this.equimentControllerTypeField = value;
                    this.RaisePropertyChanged("equimentControllerType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmenNo {
            get {
                return this.equipmenNoField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmenNoField, value) != true)) {
                    this.equipmenNoField = value;
                    this.RaisePropertyChanged("equipmenNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmenPictureName {
            get {
                return this.equipmenPictureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmenPictureNameField, value) != true)) {
                    this.equipmenPictureNameField = value;
                    this.RaisePropertyChanged("equipmenPictureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmenType {
            get {
                return this.equipmenTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmenTypeField, value) != true)) {
                    this.equipmenTypeField = value;
                    this.RaisePropertyChanged("equipmenType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmentIp {
            get {
                return this.equipmentIpField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentIpField, value) != true)) {
                    this.equipmentIpField = value;
                    this.RaisePropertyChanged("equipmentIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string equipmentLocation {
            get {
                return this.equipmentLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentLocationField, value) != true)) {
                    this.equipmentLocationField = value;
                    this.RaisePropertyChanged("equipmentLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] equipmentPicture {
            get {
                return this.equipmentPictureField;
            }
            set {
                if ((object.ReferenceEquals(this.equipmentPictureField, value) != true)) {
                    this.equipmentPictureField = value;
                    this.RaisePropertyChanged("equipmentPicture");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EquipmentInformation", Namespace="http://schemas.datacontract.org/2004/07/ModelManagementServices")]
    public partial class EquipmentInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNCIDField;
        
        private string StateField;
        
        private string v_Machine_IDField;
        
        private string v_Machine_IPField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNCID {
            get {
                return this.CNCIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CNCIDField, value) != true)) {
                    this.CNCIDField = value;
                    this.RaisePropertyChanged("CNCID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string v_Machine_ID {
            get {
                return this.v_Machine_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.v_Machine_IDField, value) != true)) {
                    this.v_Machine_IDField = value;
                    this.RaisePropertyChanged("v_Machine_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string v_Machine_IP {
            get {
                return this.v_Machine_IPField;
            }
            set {
                if ((object.ReferenceEquals(this.v_Machine_IPField, value) != true)) {
                    this.v_Machine_IPField = value;
                    this.RaisePropertyChanged("v_Machine_IP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModelManager.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/CurrentVersion", ReplyAction="http://tempuri.org/IService1/CurrentVersionResponse")]
        System.IAsyncResult BeginCurrentVersion(System.AsyncCallback callback, object asyncState);
        
        string EndCurrentVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getCNCType", ReplyAction="http://tempuri.org/IService1/getCNCTypeResponse")]
        System.IAsyncResult BegingetCNCType(string cncNumber, System.AsyncCallback callback, object asyncState);
        
        string EndgetCNCType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/uploadModel", ReplyAction="http://tempuri.org/IService1/uploadModelResponse")]
        System.IAsyncResult BeginuploadModel(IPS.ModelManager.ModelStorationInformation modelStorationInformation, string UserName, System.AsyncCallback callback, object asyncState);
        
        string EnduploadModel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/uploadTempModel", ReplyAction="http://tempuri.org/IService1/uploadTempModelResponse")]
        System.IAsyncResult BeginuploadTempModel(string UserName, System.AsyncCallback callback, object asyncState);
        
        string EnduploadTempModel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getTempBlob", ReplyAction="http://tempuri.org/IService1/getTempBlobResponse")]
        System.IAsyncResult BegingetTempBlob(string UserName, System.AsyncCallback callback, object asyncState);
        
        string EndgetTempBlob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/deleteModel", ReplyAction="http://tempuri.org/IService1/deleteModelResponse")]
        System.IAsyncResult BegindeleteModel(string modelName, System.AsyncCallback callback, object asyncState);
        
        string EnddeleteModel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/deleteTempBlobData", ReplyAction="http://tempuri.org/IService1/deleteTempBlobDataResponse")]
        System.IAsyncResult BegindeleteTempBlobData(string dataID, string modelFileType, System.AsyncCallback callback, object asyncState);
        
        string EnddeleteTempBlobData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getModelInformationList", ReplyAction="http://tempuri.org/IService1/getModelInformationListResponse")]
        System.IAsyncResult BegingetModelInformationList(string ServiceBrokerID, string vMachineID, string cnc_number, string ProductID, System.DateTime creationStartDate, System.DateTime creationEndDate, string userName, string userCompany, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> EndgetModelInformationList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/fanOutModelControl", ReplyAction="http://tempuri.org/IService1/fanOutModelControlResponse")]
        System.IAsyncResult BeginfanOutModelControl(string modelID, System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation> EquipmentList, string user, System.AsyncCallback callback, object asyncState);
        
        IPS.ModelManager.ModelFull EndfanOutModelControl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/fanOutModel", ReplyAction="http://tempuri.org/IService1/fanOutModelResponse")]
        System.IAsyncResult BeginfanOutModel(System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent> ModelInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndfanOutModel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getModelFilterParameter", ReplyAction="http://tempuri.org/IService1/getModelFilterParameterResponse")]
        System.IAsyncResult BegingetModelFilterParameter(string UserCompany, System.AsyncCallback callback, object asyncState);
        
        IPS.ModelManager.ModelFilterParameters EndgetModelFilterParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getVmachineInformationList", ReplyAction="http://tempuri.org/IService1/getVmachineInformationListResponse")]
        System.IAsyncResult BegingetVmachineInformationList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine> EndgetVmachineInformationList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getAllModelInformation", ReplyAction="http://tempuri.org/IService1/getAllModelInformationResponse")]
        System.IAsyncResult BegingetAllModelInformation(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> EndgetAllModelInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getEquipmentInformationList", ReplyAction="http://tempuri.org/IService1/getEquipmentInformationListResponse")]
        System.IAsyncResult BegingetEquipmentInformationList(string ServiceBrokerID, string company, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation> EndgetEquipmentInformationList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getEquipmentInformationLists", ReplyAction="http://tempuri.org/IService1/getEquipmentInformationListsResponse")]
        System.IAsyncResult BegingetEquipmentInformationLists(string ServiceBrokerID, string company, System.AsyncCallback callback, object asyncState);
        
        string EndgetEquipmentInformationLists(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : IPS.ModelManager.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrentVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrentVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCNCTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCNCTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class uploadModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public uploadModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class uploadTempModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public uploadTempModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTempBlobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTempBlobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteTempBlobDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteTempBlobDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getModelInformationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getModelInformationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class fanOutModelControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public fanOutModelControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IPS.ModelManager.ModelFull Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IPS.ModelManager.ModelFull)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class fanOutModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public fanOutModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getModelFilterParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getModelFilterParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IPS.ModelManager.ModelFilterParameters Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IPS.ModelManager.ModelFilterParameters)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getVmachineInformationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getVmachineInformationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAllModelInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAllModelInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getEquipmentInformationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getEquipmentInformationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getEquipmentInformationListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getEquipmentInformationListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<IPS.ModelManager.IService1>, IPS.ModelManager.IService1 {
        
        private BeginOperationDelegate onBeginCurrentVersionDelegate;
        
        private EndOperationDelegate onEndCurrentVersionDelegate;
        
        private System.Threading.SendOrPostCallback onCurrentVersionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCNCTypeDelegate;
        
        private EndOperationDelegate onEndgetCNCTypeDelegate;
        
        private System.Threading.SendOrPostCallback ongetCNCTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginuploadModelDelegate;
        
        private EndOperationDelegate onEnduploadModelDelegate;
        
        private System.Threading.SendOrPostCallback onuploadModelCompletedDelegate;
        
        private BeginOperationDelegate onBeginuploadTempModelDelegate;
        
        private EndOperationDelegate onEnduploadTempModelDelegate;
        
        private System.Threading.SendOrPostCallback onuploadTempModelCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTempBlobDelegate;
        
        private EndOperationDelegate onEndgetTempBlobDelegate;
        
        private System.Threading.SendOrPostCallback ongetTempBlobCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteModelDelegate;
        
        private EndOperationDelegate onEnddeleteModelDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteModelCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteTempBlobDataDelegate;
        
        private EndOperationDelegate onEnddeleteTempBlobDataDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteTempBlobDataCompletedDelegate;
        
        private BeginOperationDelegate onBegingetModelInformationListDelegate;
        
        private EndOperationDelegate onEndgetModelInformationListDelegate;
        
        private System.Threading.SendOrPostCallback ongetModelInformationListCompletedDelegate;
        
        private BeginOperationDelegate onBeginfanOutModelControlDelegate;
        
        private EndOperationDelegate onEndfanOutModelControlDelegate;
        
        private System.Threading.SendOrPostCallback onfanOutModelControlCompletedDelegate;
        
        private BeginOperationDelegate onBeginfanOutModelDelegate;
        
        private EndOperationDelegate onEndfanOutModelDelegate;
        
        private System.Threading.SendOrPostCallback onfanOutModelCompletedDelegate;
        
        private BeginOperationDelegate onBegingetModelFilterParameterDelegate;
        
        private EndOperationDelegate onEndgetModelFilterParameterDelegate;
        
        private System.Threading.SendOrPostCallback ongetModelFilterParameterCompletedDelegate;
        
        private BeginOperationDelegate onBegingetVmachineInformationListDelegate;
        
        private EndOperationDelegate onEndgetVmachineInformationListDelegate;
        
        private System.Threading.SendOrPostCallback ongetVmachineInformationListCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAllModelInformationDelegate;
        
        private EndOperationDelegate onEndgetAllModelInformationDelegate;
        
        private System.Threading.SendOrPostCallback ongetAllModelInformationCompletedDelegate;
        
        private BeginOperationDelegate onBegingetEquipmentInformationListDelegate;
        
        private EndOperationDelegate onEndgetEquipmentInformationListDelegate;
        
        private System.Threading.SendOrPostCallback ongetEquipmentInformationListCompletedDelegate;
        
        private BeginOperationDelegate onBegingetEquipmentInformationListsDelegate;
        
        private EndOperationDelegate onEndgetEquipmentInformationListsDelegate;
        
        private System.Threading.SendOrPostCallback ongetEquipmentInformationListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<CurrentVersionCompletedEventArgs> CurrentVersionCompleted;
        
        public event System.EventHandler<getCNCTypeCompletedEventArgs> getCNCTypeCompleted;
        
        public event System.EventHandler<uploadModelCompletedEventArgs> uploadModelCompleted;
        
        public event System.EventHandler<uploadTempModelCompletedEventArgs> uploadTempModelCompleted;
        
        public event System.EventHandler<getTempBlobCompletedEventArgs> getTempBlobCompleted;
        
        public event System.EventHandler<deleteModelCompletedEventArgs> deleteModelCompleted;
        
        public event System.EventHandler<deleteTempBlobDataCompletedEventArgs> deleteTempBlobDataCompleted;
        
        public event System.EventHandler<getModelInformationListCompletedEventArgs> getModelInformationListCompleted;
        
        public event System.EventHandler<fanOutModelControlCompletedEventArgs> fanOutModelControlCompleted;
        
        public event System.EventHandler<fanOutModelCompletedEventArgs> fanOutModelCompleted;
        
        public event System.EventHandler<getModelFilterParameterCompletedEventArgs> getModelFilterParameterCompleted;
        
        public event System.EventHandler<getVmachineInformationListCompletedEventArgs> getVmachineInformationListCompleted;
        
        public event System.EventHandler<getAllModelInformationCompletedEventArgs> getAllModelInformationCompleted;
        
        public event System.EventHandler<getEquipmentInformationListCompletedEventArgs> getEquipmentInformationListCompleted;
        
        public event System.EventHandler<getEquipmentInformationListsCompletedEventArgs> getEquipmentInformationListsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BeginCurrentVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrentVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EndCurrentVersion(System.IAsyncResult result) {
            return base.Channel.EndCurrentVersion(result);
        }
        
        private System.IAsyncResult OnBeginCurrentVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.ModelManager.IService1)(this)).BeginCurrentVersion(callback, asyncState);
        }
        
        private object[] OnEndCurrentVersion(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EndCurrentVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrentVersionCompleted(object state) {
            if ((this.CurrentVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrentVersionCompleted(this, new CurrentVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrentVersionAsync() {
            this.CurrentVersionAsync(null);
        }
        
        public void CurrentVersionAsync(object userState) {
            if ((this.onBeginCurrentVersionDelegate == null)) {
                this.onBeginCurrentVersionDelegate = new BeginOperationDelegate(this.OnBeginCurrentVersion);
            }
            if ((this.onEndCurrentVersionDelegate == null)) {
                this.onEndCurrentVersionDelegate = new EndOperationDelegate(this.OnEndCurrentVersion);
            }
            if ((this.onCurrentVersionCompletedDelegate == null)) {
                this.onCurrentVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrentVersionCompleted);
            }
            base.InvokeAsync(this.onBeginCurrentVersionDelegate, null, this.onEndCurrentVersionDelegate, this.onCurrentVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetCNCType(string cncNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCNCType(cncNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EndgetCNCType(System.IAsyncResult result) {
            return base.Channel.EndgetCNCType(result);
        }
        
        private System.IAsyncResult OnBegingetCNCType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cncNumber = ((string)(inValues[0]));
            return ((IPS.ModelManager.IService1)(this)).BegingetCNCType(cncNumber, callback, asyncState);
        }
        
        private object[] OnEndgetCNCType(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EndgetCNCType(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCNCTypeCompleted(object state) {
            if ((this.getCNCTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCNCTypeCompleted(this, new getCNCTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCNCTypeAsync(string cncNumber) {
            this.getCNCTypeAsync(cncNumber, null);
        }
        
        public void getCNCTypeAsync(string cncNumber, object userState) {
            if ((this.onBegingetCNCTypeDelegate == null)) {
                this.onBegingetCNCTypeDelegate = new BeginOperationDelegate(this.OnBegingetCNCType);
            }
            if ((this.onEndgetCNCTypeDelegate == null)) {
                this.onEndgetCNCTypeDelegate = new EndOperationDelegate(this.OnEndgetCNCType);
            }
            if ((this.ongetCNCTypeCompletedDelegate == null)) {
                this.ongetCNCTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCNCTypeCompleted);
            }
            base.InvokeAsync(this.onBegingetCNCTypeDelegate, new object[] {
                        cncNumber}, this.onEndgetCNCTypeDelegate, this.ongetCNCTypeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BeginuploadModel(IPS.ModelManager.ModelStorationInformation modelStorationInformation, string UserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuploadModel(modelStorationInformation, UserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EnduploadModel(System.IAsyncResult result) {
            return base.Channel.EnduploadModel(result);
        }
        
        private System.IAsyncResult OnBeginuploadModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IPS.ModelManager.ModelStorationInformation modelStorationInformation = ((IPS.ModelManager.ModelStorationInformation)(inValues[0]));
            string UserName = ((string)(inValues[1]));
            return ((IPS.ModelManager.IService1)(this)).BeginuploadModel(modelStorationInformation, UserName, callback, asyncState);
        }
        
        private object[] OnEnduploadModel(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EnduploadModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnuploadModelCompleted(object state) {
            if ((this.uploadModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.uploadModelCompleted(this, new uploadModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void uploadModelAsync(IPS.ModelManager.ModelStorationInformation modelStorationInformation, string UserName) {
            this.uploadModelAsync(modelStorationInformation, UserName, null);
        }
        
        public void uploadModelAsync(IPS.ModelManager.ModelStorationInformation modelStorationInformation, string UserName, object userState) {
            if ((this.onBeginuploadModelDelegate == null)) {
                this.onBeginuploadModelDelegate = new BeginOperationDelegate(this.OnBeginuploadModel);
            }
            if ((this.onEnduploadModelDelegate == null)) {
                this.onEnduploadModelDelegate = new EndOperationDelegate(this.OnEnduploadModel);
            }
            if ((this.onuploadModelCompletedDelegate == null)) {
                this.onuploadModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuploadModelCompleted);
            }
            base.InvokeAsync(this.onBeginuploadModelDelegate, new object[] {
                        modelStorationInformation,
                        UserName}, this.onEnduploadModelDelegate, this.onuploadModelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BeginuploadTempModel(string UserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuploadTempModel(UserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EnduploadTempModel(System.IAsyncResult result) {
            return base.Channel.EnduploadTempModel(result);
        }
        
        private System.IAsyncResult OnBeginuploadTempModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            return ((IPS.ModelManager.IService1)(this)).BeginuploadTempModel(UserName, callback, asyncState);
        }
        
        private object[] OnEnduploadTempModel(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EnduploadTempModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnuploadTempModelCompleted(object state) {
            if ((this.uploadTempModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.uploadTempModelCompleted(this, new uploadTempModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void uploadTempModelAsync(string UserName) {
            this.uploadTempModelAsync(UserName, null);
        }
        
        public void uploadTempModelAsync(string UserName, object userState) {
            if ((this.onBeginuploadTempModelDelegate == null)) {
                this.onBeginuploadTempModelDelegate = new BeginOperationDelegate(this.OnBeginuploadTempModel);
            }
            if ((this.onEnduploadTempModelDelegate == null)) {
                this.onEnduploadTempModelDelegate = new EndOperationDelegate(this.OnEnduploadTempModel);
            }
            if ((this.onuploadTempModelCompletedDelegate == null)) {
                this.onuploadTempModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuploadTempModelCompleted);
            }
            base.InvokeAsync(this.onBeginuploadTempModelDelegate, new object[] {
                        UserName}, this.onEnduploadTempModelDelegate, this.onuploadTempModelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetTempBlob(string UserName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTempBlob(UserName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EndgetTempBlob(System.IAsyncResult result) {
            return base.Channel.EndgetTempBlob(result);
        }
        
        private System.IAsyncResult OnBegingetTempBlob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            return ((IPS.ModelManager.IService1)(this)).BegingetTempBlob(UserName, callback, asyncState);
        }
        
        private object[] OnEndgetTempBlob(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EndgetTempBlob(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTempBlobCompleted(object state) {
            if ((this.getTempBlobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTempBlobCompleted(this, new getTempBlobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTempBlobAsync(string UserName) {
            this.getTempBlobAsync(UserName, null);
        }
        
        public void getTempBlobAsync(string UserName, object userState) {
            if ((this.onBegingetTempBlobDelegate == null)) {
                this.onBegingetTempBlobDelegate = new BeginOperationDelegate(this.OnBegingetTempBlob);
            }
            if ((this.onEndgetTempBlobDelegate == null)) {
                this.onEndgetTempBlobDelegate = new EndOperationDelegate(this.OnEndgetTempBlob);
            }
            if ((this.ongetTempBlobCompletedDelegate == null)) {
                this.ongetTempBlobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTempBlobCompleted);
            }
            base.InvokeAsync(this.onBegingetTempBlobDelegate, new object[] {
                        UserName}, this.onEndgetTempBlobDelegate, this.ongetTempBlobCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegindeleteModel(string modelName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteModel(modelName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EnddeleteModel(System.IAsyncResult result) {
            return base.Channel.EnddeleteModel(result);
        }
        
        private System.IAsyncResult OnBegindeleteModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string modelName = ((string)(inValues[0]));
            return ((IPS.ModelManager.IService1)(this)).BegindeleteModel(modelName, callback, asyncState);
        }
        
        private object[] OnEnddeleteModel(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EnddeleteModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OndeleteModelCompleted(object state) {
            if ((this.deleteModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteModelCompleted(this, new deleteModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteModelAsync(string modelName) {
            this.deleteModelAsync(modelName, null);
        }
        
        public void deleteModelAsync(string modelName, object userState) {
            if ((this.onBegindeleteModelDelegate == null)) {
                this.onBegindeleteModelDelegate = new BeginOperationDelegate(this.OnBegindeleteModel);
            }
            if ((this.onEnddeleteModelDelegate == null)) {
                this.onEnddeleteModelDelegate = new EndOperationDelegate(this.OnEnddeleteModel);
            }
            if ((this.ondeleteModelCompletedDelegate == null)) {
                this.ondeleteModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteModelCompleted);
            }
            base.InvokeAsync(this.onBegindeleteModelDelegate, new object[] {
                        modelName}, this.onEnddeleteModelDelegate, this.ondeleteModelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegindeleteTempBlobData(string dataID, string modelFileType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteTempBlobData(dataID, modelFileType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EnddeleteTempBlobData(System.IAsyncResult result) {
            return base.Channel.EnddeleteTempBlobData(result);
        }
        
        private System.IAsyncResult OnBegindeleteTempBlobData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string dataID = ((string)(inValues[0]));
            string modelFileType = ((string)(inValues[1]));
            return ((IPS.ModelManager.IService1)(this)).BegindeleteTempBlobData(dataID, modelFileType, callback, asyncState);
        }
        
        private object[] OnEnddeleteTempBlobData(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EnddeleteTempBlobData(result);
            return new object[] {
                    retVal};
        }
        
        private void OndeleteTempBlobDataCompleted(object state) {
            if ((this.deleteTempBlobDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteTempBlobDataCompleted(this, new deleteTempBlobDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteTempBlobDataAsync(string dataID, string modelFileType) {
            this.deleteTempBlobDataAsync(dataID, modelFileType, null);
        }
        
        public void deleteTempBlobDataAsync(string dataID, string modelFileType, object userState) {
            if ((this.onBegindeleteTempBlobDataDelegate == null)) {
                this.onBegindeleteTempBlobDataDelegate = new BeginOperationDelegate(this.OnBegindeleteTempBlobData);
            }
            if ((this.onEnddeleteTempBlobDataDelegate == null)) {
                this.onEnddeleteTempBlobDataDelegate = new EndOperationDelegate(this.OnEnddeleteTempBlobData);
            }
            if ((this.ondeleteTempBlobDataCompletedDelegate == null)) {
                this.ondeleteTempBlobDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteTempBlobDataCompleted);
            }
            base.InvokeAsync(this.onBegindeleteTempBlobDataDelegate, new object[] {
                        dataID,
                        modelFileType}, this.onEnddeleteTempBlobDataDelegate, this.ondeleteTempBlobDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetModelInformationList(string ServiceBrokerID, string vMachineID, string cnc_number, string ProductID, System.DateTime creationStartDate, System.DateTime creationEndDate, string userName, string userCompany, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetModelInformationList(ServiceBrokerID, vMachineID, cnc_number, ProductID, creationStartDate, creationEndDate, userName, userCompany, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> IPS.ModelManager.IService1.EndgetModelInformationList(System.IAsyncResult result) {
            return base.Channel.EndgetModelInformationList(result);
        }
        
        private System.IAsyncResult OnBegingetModelInformationList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ServiceBrokerID = ((string)(inValues[0]));
            string vMachineID = ((string)(inValues[1]));
            string cnc_number = ((string)(inValues[2]));
            string ProductID = ((string)(inValues[3]));
            System.DateTime creationStartDate = ((System.DateTime)(inValues[4]));
            System.DateTime creationEndDate = ((System.DateTime)(inValues[5]));
            string userName = ((string)(inValues[6]));
            string userCompany = ((string)(inValues[7]));
            return ((IPS.ModelManager.IService1)(this)).BegingetModelInformationList(ServiceBrokerID, vMachineID, cnc_number, ProductID, creationStartDate, creationEndDate, userName, userCompany, callback, asyncState);
        }
        
        private object[] OnEndgetModelInformationList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> retVal = ((IPS.ModelManager.IService1)(this)).EndgetModelInformationList(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetModelInformationListCompleted(object state) {
            if ((this.getModelInformationListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getModelInformationListCompleted(this, new getModelInformationListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getModelInformationListAsync(string ServiceBrokerID, string vMachineID, string cnc_number, string ProductID, System.DateTime creationStartDate, System.DateTime creationEndDate, string userName, string userCompany) {
            this.getModelInformationListAsync(ServiceBrokerID, vMachineID, cnc_number, ProductID, creationStartDate, creationEndDate, userName, userCompany, null);
        }
        
        public void getModelInformationListAsync(string ServiceBrokerID, string vMachineID, string cnc_number, string ProductID, System.DateTime creationStartDate, System.DateTime creationEndDate, string userName, string userCompany, object userState) {
            if ((this.onBegingetModelInformationListDelegate == null)) {
                this.onBegingetModelInformationListDelegate = new BeginOperationDelegate(this.OnBegingetModelInformationList);
            }
            if ((this.onEndgetModelInformationListDelegate == null)) {
                this.onEndgetModelInformationListDelegate = new EndOperationDelegate(this.OnEndgetModelInformationList);
            }
            if ((this.ongetModelInformationListCompletedDelegate == null)) {
                this.ongetModelInformationListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetModelInformationListCompleted);
            }
            base.InvokeAsync(this.onBegingetModelInformationListDelegate, new object[] {
                        ServiceBrokerID,
                        vMachineID,
                        cnc_number,
                        ProductID,
                        creationStartDate,
                        creationEndDate,
                        userName,
                        userCompany}, this.onEndgetModelInformationListDelegate, this.ongetModelInformationListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BeginfanOutModelControl(string modelID, System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation> EquipmentList, string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginfanOutModelControl(modelID, EquipmentList, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPS.ModelManager.ModelFull IPS.ModelManager.IService1.EndfanOutModelControl(System.IAsyncResult result) {
            return base.Channel.EndfanOutModelControl(result);
        }
        
        private System.IAsyncResult OnBeginfanOutModelControl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string modelID = ((string)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation> EquipmentList = ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation>)(inValues[1]));
            string user = ((string)(inValues[2]));
            return ((IPS.ModelManager.IService1)(this)).BeginfanOutModelControl(modelID, EquipmentList, user, callback, asyncState);
        }
        
        private object[] OnEndfanOutModelControl(System.IAsyncResult result) {
            IPS.ModelManager.ModelFull retVal = ((IPS.ModelManager.IService1)(this)).EndfanOutModelControl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnfanOutModelControlCompleted(object state) {
            if ((this.fanOutModelControlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.fanOutModelControlCompleted(this, new fanOutModelControlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void fanOutModelControlAsync(string modelID, System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation> EquipmentList, string user) {
            this.fanOutModelControlAsync(modelID, EquipmentList, user, null);
        }
        
        public void fanOutModelControlAsync(string modelID, System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation> EquipmentList, string user, object userState) {
            if ((this.onBeginfanOutModelControlDelegate == null)) {
                this.onBeginfanOutModelControlDelegate = new BeginOperationDelegate(this.OnBeginfanOutModelControl);
            }
            if ((this.onEndfanOutModelControlDelegate == null)) {
                this.onEndfanOutModelControlDelegate = new EndOperationDelegate(this.OnEndfanOutModelControl);
            }
            if ((this.onfanOutModelControlCompletedDelegate == null)) {
                this.onfanOutModelControlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnfanOutModelControlCompleted);
            }
            base.InvokeAsync(this.onBeginfanOutModelControlDelegate, new object[] {
                        modelID,
                        EquipmentList,
                        user}, this.onEndfanOutModelControlDelegate, this.onfanOutModelControlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BeginfanOutModel(System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent> ModelInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginfanOutModel(ModelInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IPS.ModelManager.IService1.EndfanOutModel(System.IAsyncResult result) {
            return base.Channel.EndfanOutModel(result);
        }
        
        private System.IAsyncResult OnBeginfanOutModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent> ModelInfo = ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent>)(inValues[0]));
            return ((IPS.ModelManager.IService1)(this)).BeginfanOutModel(ModelInfo, callback, asyncState);
        }
        
        private object[] OnEndfanOutModel(System.IAsyncResult result) {
            bool retVal = ((IPS.ModelManager.IService1)(this)).EndfanOutModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnfanOutModelCompleted(object state) {
            if ((this.fanOutModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.fanOutModelCompleted(this, new fanOutModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void fanOutModelAsync(System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent> ModelInfo) {
            this.fanOutModelAsync(ModelInfo, null);
        }
        
        public void fanOutModelAsync(System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent> ModelInfo, object userState) {
            if ((this.onBeginfanOutModelDelegate == null)) {
                this.onBeginfanOutModelDelegate = new BeginOperationDelegate(this.OnBeginfanOutModel);
            }
            if ((this.onEndfanOutModelDelegate == null)) {
                this.onEndfanOutModelDelegate = new EndOperationDelegate(this.OnEndfanOutModel);
            }
            if ((this.onfanOutModelCompletedDelegate == null)) {
                this.onfanOutModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnfanOutModelCompleted);
            }
            base.InvokeAsync(this.onBeginfanOutModelDelegate, new object[] {
                        ModelInfo}, this.onEndfanOutModelDelegate, this.onfanOutModelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetModelFilterParameter(string UserCompany, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetModelFilterParameter(UserCompany, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPS.ModelManager.ModelFilterParameters IPS.ModelManager.IService1.EndgetModelFilterParameter(System.IAsyncResult result) {
            return base.Channel.EndgetModelFilterParameter(result);
        }
        
        private System.IAsyncResult OnBegingetModelFilterParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserCompany = ((string)(inValues[0]));
            return ((IPS.ModelManager.IService1)(this)).BegingetModelFilterParameter(UserCompany, callback, asyncState);
        }
        
        private object[] OnEndgetModelFilterParameter(System.IAsyncResult result) {
            IPS.ModelManager.ModelFilterParameters retVal = ((IPS.ModelManager.IService1)(this)).EndgetModelFilterParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetModelFilterParameterCompleted(object state) {
            if ((this.getModelFilterParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getModelFilterParameterCompleted(this, new getModelFilterParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getModelFilterParameterAsync(string UserCompany) {
            this.getModelFilterParameterAsync(UserCompany, null);
        }
        
        public void getModelFilterParameterAsync(string UserCompany, object userState) {
            if ((this.onBegingetModelFilterParameterDelegate == null)) {
                this.onBegingetModelFilterParameterDelegate = new BeginOperationDelegate(this.OnBegingetModelFilterParameter);
            }
            if ((this.onEndgetModelFilterParameterDelegate == null)) {
                this.onEndgetModelFilterParameterDelegate = new EndOperationDelegate(this.OnEndgetModelFilterParameter);
            }
            if ((this.ongetModelFilterParameterCompletedDelegate == null)) {
                this.ongetModelFilterParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetModelFilterParameterCompleted);
            }
            base.InvokeAsync(this.onBegingetModelFilterParameterDelegate, new object[] {
                        UserCompany}, this.onEndgetModelFilterParameterDelegate, this.ongetModelFilterParameterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetVmachineInformationList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetVmachineInformationList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine> IPS.ModelManager.IService1.EndgetVmachineInformationList(System.IAsyncResult result) {
            return base.Channel.EndgetVmachineInformationList(result);
        }
        
        private System.IAsyncResult OnBegingetVmachineInformationList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.ModelManager.IService1)(this)).BegingetVmachineInformationList(callback, asyncState);
        }
        
        private object[] OnEndgetVmachineInformationList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine> retVal = ((IPS.ModelManager.IService1)(this)).EndgetVmachineInformationList(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetVmachineInformationListCompleted(object state) {
            if ((this.getVmachineInformationListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getVmachineInformationListCompleted(this, new getVmachineInformationListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getVmachineInformationListAsync() {
            this.getVmachineInformationListAsync(null);
        }
        
        public void getVmachineInformationListAsync(object userState) {
            if ((this.onBegingetVmachineInformationListDelegate == null)) {
                this.onBegingetVmachineInformationListDelegate = new BeginOperationDelegate(this.OnBegingetVmachineInformationList);
            }
            if ((this.onEndgetVmachineInformationListDelegate == null)) {
                this.onEndgetVmachineInformationListDelegate = new EndOperationDelegate(this.OnEndgetVmachineInformationList);
            }
            if ((this.ongetVmachineInformationListCompletedDelegate == null)) {
                this.ongetVmachineInformationListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetVmachineInformationListCompleted);
            }
            base.InvokeAsync(this.onBegingetVmachineInformationListDelegate, null, this.onEndgetVmachineInformationListDelegate, this.ongetVmachineInformationListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetAllModelInformation(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAllModelInformation(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> IPS.ModelManager.IService1.EndgetAllModelInformation(System.IAsyncResult result) {
            return base.Channel.EndgetAllModelInformation(result);
        }
        
        private System.IAsyncResult OnBegingetAllModelInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.ModelManager.IService1)(this)).BegingetAllModelInformation(callback, asyncState);
        }
        
        private object[] OnEndgetAllModelInformation(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> retVal = ((IPS.ModelManager.IService1)(this)).EndgetAllModelInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAllModelInformationCompleted(object state) {
            if ((this.getAllModelInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAllModelInformationCompleted(this, new getAllModelInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAllModelInformationAsync() {
            this.getAllModelInformationAsync(null);
        }
        
        public void getAllModelInformationAsync(object userState) {
            if ((this.onBegingetAllModelInformationDelegate == null)) {
                this.onBegingetAllModelInformationDelegate = new BeginOperationDelegate(this.OnBegingetAllModelInformation);
            }
            if ((this.onEndgetAllModelInformationDelegate == null)) {
                this.onEndgetAllModelInformationDelegate = new EndOperationDelegate(this.OnEndgetAllModelInformation);
            }
            if ((this.ongetAllModelInformationCompletedDelegate == null)) {
                this.ongetAllModelInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAllModelInformationCompleted);
            }
            base.InvokeAsync(this.onBegingetAllModelInformationDelegate, null, this.onEndgetAllModelInformationDelegate, this.ongetAllModelInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetEquipmentInformationList(string ServiceBrokerID, string company, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetEquipmentInformationList(ServiceBrokerID, company, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation> IPS.ModelManager.IService1.EndgetEquipmentInformationList(System.IAsyncResult result) {
            return base.Channel.EndgetEquipmentInformationList(result);
        }
        
        private System.IAsyncResult OnBegingetEquipmentInformationList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ServiceBrokerID = ((string)(inValues[0]));
            string company = ((string)(inValues[1]));
            return ((IPS.ModelManager.IService1)(this)).BegingetEquipmentInformationList(ServiceBrokerID, company, callback, asyncState);
        }
        
        private object[] OnEndgetEquipmentInformationList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation> retVal = ((IPS.ModelManager.IService1)(this)).EndgetEquipmentInformationList(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetEquipmentInformationListCompleted(object state) {
            if ((this.getEquipmentInformationListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getEquipmentInformationListCompleted(this, new getEquipmentInformationListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getEquipmentInformationListAsync(string ServiceBrokerID, string company) {
            this.getEquipmentInformationListAsync(ServiceBrokerID, company, null);
        }
        
        public void getEquipmentInformationListAsync(string ServiceBrokerID, string company, object userState) {
            if ((this.onBegingetEquipmentInformationListDelegate == null)) {
                this.onBegingetEquipmentInformationListDelegate = new BeginOperationDelegate(this.OnBegingetEquipmentInformationList);
            }
            if ((this.onEndgetEquipmentInformationListDelegate == null)) {
                this.onEndgetEquipmentInformationListDelegate = new EndOperationDelegate(this.OnEndgetEquipmentInformationList);
            }
            if ((this.ongetEquipmentInformationListCompletedDelegate == null)) {
                this.ongetEquipmentInformationListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetEquipmentInformationListCompleted);
            }
            base.InvokeAsync(this.onBegingetEquipmentInformationListDelegate, new object[] {
                        ServiceBrokerID,
                        company}, this.onEndgetEquipmentInformationListDelegate, this.ongetEquipmentInformationListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ModelManager.IService1.BegingetEquipmentInformationLists(string ServiceBrokerID, string company, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetEquipmentInformationLists(ServiceBrokerID, company, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ModelManager.IService1.EndgetEquipmentInformationLists(System.IAsyncResult result) {
            return base.Channel.EndgetEquipmentInformationLists(result);
        }
        
        private System.IAsyncResult OnBegingetEquipmentInformationLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ServiceBrokerID = ((string)(inValues[0]));
            string company = ((string)(inValues[1]));
            return ((IPS.ModelManager.IService1)(this)).BegingetEquipmentInformationLists(ServiceBrokerID, company, callback, asyncState);
        }
        
        private object[] OnEndgetEquipmentInformationLists(System.IAsyncResult result) {
            string retVal = ((IPS.ModelManager.IService1)(this)).EndgetEquipmentInformationLists(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetEquipmentInformationListsCompleted(object state) {
            if ((this.getEquipmentInformationListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getEquipmentInformationListsCompleted(this, new getEquipmentInformationListsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getEquipmentInformationListsAsync(string ServiceBrokerID, string company) {
            this.getEquipmentInformationListsAsync(ServiceBrokerID, company, null);
        }
        
        public void getEquipmentInformationListsAsync(string ServiceBrokerID, string company, object userState) {
            if ((this.onBegingetEquipmentInformationListsDelegate == null)) {
                this.onBegingetEquipmentInformationListsDelegate = new BeginOperationDelegate(this.OnBegingetEquipmentInformationLists);
            }
            if ((this.onEndgetEquipmentInformationListsDelegate == null)) {
                this.onEndgetEquipmentInformationListsDelegate = new EndOperationDelegate(this.OnEndgetEquipmentInformationLists);
            }
            if ((this.ongetEquipmentInformationListsCompletedDelegate == null)) {
                this.ongetEquipmentInformationListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetEquipmentInformationListsCompleted);
            }
            base.InvokeAsync(this.onBegingetEquipmentInformationListsDelegate, new object[] {
                        ServiceBrokerID,
                        company}, this.onEndgetEquipmentInformationListsDelegate, this.ongetEquipmentInformationListsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPS.ModelManager.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<IPS.ModelManager.IService1>, IPS.ModelManager.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<IPS.ModelManager.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCurrentVersion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("CurrentVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCurrentVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CurrentVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetCNCType(string cncNumber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cncNumber;
                System.IAsyncResult _result = base.BeginInvoke("getCNCType", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetCNCType(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getCNCType", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginuploadModel(IPS.ModelManager.ModelStorationInformation modelStorationInformation, string UserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = modelStorationInformation;
                _args[1] = UserName;
                System.IAsyncResult _result = base.BeginInvoke("uploadModel", _args, callback, asyncState);
                return _result;
            }
            
            public string EnduploadModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("uploadModel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginuploadTempModel(string UserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = UserName;
                System.IAsyncResult _result = base.BeginInvoke("uploadTempModel", _args, callback, asyncState);
                return _result;
            }
            
            public string EnduploadTempModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("uploadTempModel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetTempBlob(string UserName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = UserName;
                System.IAsyncResult _result = base.BeginInvoke("getTempBlob", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetTempBlob(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getTempBlob", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegindeleteModel(string modelName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = modelName;
                System.IAsyncResult _result = base.BeginInvoke("deleteModel", _args, callback, asyncState);
                return _result;
            }
            
            public string EnddeleteModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("deleteModel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegindeleteTempBlobData(string dataID, string modelFileType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dataID;
                _args[1] = modelFileType;
                System.IAsyncResult _result = base.BeginInvoke("deleteTempBlobData", _args, callback, asyncState);
                return _result;
            }
            
            public string EnddeleteTempBlobData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("deleteTempBlobData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetModelInformationList(string ServiceBrokerID, string vMachineID, string cnc_number, string ProductID, System.DateTime creationStartDate, System.DateTime creationEndDate, string userName, string userCompany, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = ServiceBrokerID;
                _args[1] = vMachineID;
                _args[2] = cnc_number;
                _args[3] = ProductID;
                _args[4] = creationStartDate;
                _args[5] = creationEndDate;
                _args[6] = userName;
                _args[7] = userCompany;
                System.IAsyncResult _result = base.BeginInvoke("getModelInformationList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> EndgetModelInformationList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation>)(base.EndInvoke("getModelInformationList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginfanOutModelControl(string modelID, System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.FanOutEquipmentInformation> EquipmentList, string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = modelID;
                _args[1] = EquipmentList;
                _args[2] = user;
                System.IAsyncResult _result = base.BeginInvoke("fanOutModelControl", _args, callback, asyncState);
                return _result;
            }
            
            public IPS.ModelManager.ModelFull EndfanOutModelControl(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPS.ModelManager.ModelFull _result = ((IPS.ModelManager.ModelFull)(base.EndInvoke("fanOutModelControl", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginfanOutModel(System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Model_SendContent> ModelInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ModelInfo;
                System.IAsyncResult _result = base.BeginInvoke("fanOutModel", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndfanOutModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("fanOutModel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetModelFilterParameter(string UserCompany, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = UserCompany;
                System.IAsyncResult _result = base.BeginInvoke("getModelFilterParameter", _args, callback, asyncState);
                return _result;
            }
            
            public IPS.ModelManager.ModelFilterParameters EndgetModelFilterParameter(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPS.ModelManager.ModelFilterParameters _result = ((IPS.ModelManager.ModelFilterParameters)(base.EndInvoke("getModelFilterParameter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetVmachineInformationList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getVmachineInformationList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine> EndgetVmachineInformationList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.Vmachine>)(base.EndInvoke("getVmachineInformationList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetAllModelInformation(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getAllModelInformation", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> EndgetAllModelInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.ModelInformation>)(base.EndInvoke("getAllModelInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetEquipmentInformationList(string ServiceBrokerID, string company, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ServiceBrokerID;
                _args[1] = company;
                System.IAsyncResult _result = base.BeginInvoke("getEquipmentInformationList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation> EndgetEquipmentInformationList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ModelManager.EquipmentInformation>)(base.EndInvoke("getEquipmentInformationList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetEquipmentInformationLists(string ServiceBrokerID, string company, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ServiceBrokerID;
                _args[1] = company;
                System.IAsyncResult _result = base.BeginInvoke("getEquipmentInformationLists", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetEquipmentInformationLists(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getEquipmentInformationLists", _args, result)));
                return _result;
            }
        }
    }
}
