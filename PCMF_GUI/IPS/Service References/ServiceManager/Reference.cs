//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.17929
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace IPS.ServiceManager {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SVInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole")]
    public partial class SVInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string businesskeyField;
        
        private string businessnameField;
        
        private string endpointField;
        
        private string keyField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string businesskey {
            get {
                return this.businesskeyField;
            }
            set {
                if ((object.ReferenceEquals(this.businesskeyField, value) != true)) {
                    this.businesskeyField = value;
                    this.RaisePropertyChanged("businesskey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string businessname {
            get {
                return this.businessnameField;
            }
            set {
                if ((object.ReferenceEquals(this.businessnameField, value) != true)) {
                    this.businessnameField = value;
                    this.RaisePropertyChanged("businessname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string endpoint {
            get {
                return this.endpointField;
            }
            set {
                if ((object.ReferenceEquals(this.endpointField, value) != true)) {
                    this.endpointField = value;
                    this.RaisePropertyChanged("endpoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string key {
            get {
                return this.keyField;
            }
            set {
                if ((object.ReferenceEquals(this.keyField, value) != true)) {
                    this.keyField = value;
                    this.RaisePropertyChanged("key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProviderInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole")]
    public partial class ProviderInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string keyField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string key {
            get {
                return this.keyField;
            }
            set {
                if ((object.ReferenceEquals(this.keyField, value) != true)) {
                    this.keyField = value;
                    this.RaisePropertyChanged("key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceMappingInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole")]
    public partial class ServiceMappingInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string functionNameField;
        
        private IPS.ServiceManager.SVInfo svInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string functionName {
            get {
                return this.functionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.functionNameField, value) != true)) {
                    this.functionNameField = value;
                    this.RaisePropertyChanged("functionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IPS.ServiceManager.SVInfo svInfo {
            get {
                return this.svInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.svInfoField, value) != true)) {
                    this.svInfoField = value;
                    this.RaisePropertyChanged("svInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionInfo", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole")]
    public partial class ConnectionInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string passwordField;
        
        private string urlField;
        
        private string usernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string url {
            get {
                return this.urlField;
            }
            set {
                if ((object.ReferenceEquals(this.urlField, value) != true)) {
                    this.urlField = value;
                    this.RaisePropertyChanged("url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceManager.IServiceManager")]
    public interface IServiceManager {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/CurrentVersion", ReplyAction="http://tempuri.org/IServiceManager/CurrentVersionResponse")]
        System.IAsyncResult BeginCurrentVersion(System.AsyncCallback callback, object asyncState);
        
        string EndCurrentVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/GetServiceList", ReplyAction="http://tempuri.org/IServiceManager/GetServiceListResponse")]
        System.IAsyncResult BeginGetServiceList(string businessKey, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo> EndGetServiceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/GetProviderInfoList", ReplyAction="http://tempuri.org/IServiceManager/GetProviderInfoListResponse")]
        System.IAsyncResult BeginGetProviderInfoList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo> EndGetProviderInfoList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/PublishAService", ReplyAction="http://tempuri.org/IServiceManager/PublishAServiceResponse")]
        System.IAsyncResult BeginPublishAService(string providerKey, string serviceName, string endPoint, System.AsyncCallback callback, object asyncState);
        
        bool EndPublishAService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/DeleteAService", ReplyAction="http://tempuri.org/IServiceManager/DeleteAServiceResponse")]
        System.IAsyncResult BeginDeleteAService(string serviceKey, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteAService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/GetServiceMapping", ReplyAction="http://tempuri.org/IServiceManager/GetServiceMappingResponse")]
        System.IAsyncResult BeginGetServiceMapping(string name, string UserCompany, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo> EndGetServiceMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/SaveServiceMapping", ReplyAction="http://tempuri.org/IServiceManager/SaveServiceMappingResponse")]
        System.IAsyncResult BeginSaveServiceMapping(string functionName, string serviceKey, string username, string Enterprise_Name, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveServiceMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/GetUDDIConnectionInfo", ReplyAction="http://tempuri.org/IServiceManager/GetUDDIConnectionInfoResponse")]
        System.IAsyncResult BeginGetUDDIConnectionInfo(System.AsyncCallback callback, object asyncState);
        
        IPS.ServiceManager.ConnectionInfo EndGetUDDIConnectionInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceManager/SaveUDDIConnectionInfo", ReplyAction="http://tempuri.org/IServiceManager/SaveUDDIConnectionInfoResponse")]
        System.IAsyncResult BeginSaveUDDIConnectionInfo(IPS.ServiceManager.ConnectionInfo connInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveUDDIConnectionInfo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceManagerChannel : IPS.ServiceManager.IServiceManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrentVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrentVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProviderInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProviderInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublishAServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PublishAServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteAServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteAServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveServiceMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveServiceMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUDDIConnectionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUDDIConnectionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IPS.ServiceManager.ConnectionInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IPS.ServiceManager.ConnectionInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUDDIConnectionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUDDIConnectionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceManagerClient : System.ServiceModel.ClientBase<IPS.ServiceManager.IServiceManager>, IPS.ServiceManager.IServiceManager {
        
        private BeginOperationDelegate onBeginCurrentVersionDelegate;
        
        private EndOperationDelegate onEndCurrentVersionDelegate;
        
        private System.Threading.SendOrPostCallback onCurrentVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceListDelegate;
        
        private EndOperationDelegate onEndGetServiceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProviderInfoListDelegate;
        
        private EndOperationDelegate onEndGetProviderInfoListDelegate;
        
        private System.Threading.SendOrPostCallback onGetProviderInfoListCompletedDelegate;
        
        private BeginOperationDelegate onBeginPublishAServiceDelegate;
        
        private EndOperationDelegate onEndPublishAServiceDelegate;
        
        private System.Threading.SendOrPostCallback onPublishAServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAServiceDelegate;
        
        private EndOperationDelegate onEndDeleteAServiceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceMappingDelegate;
        
        private EndOperationDelegate onEndGetServiceMappingDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveServiceMappingDelegate;
        
        private EndOperationDelegate onEndSaveServiceMappingDelegate;
        
        private System.Threading.SendOrPostCallback onSaveServiceMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUDDIConnectionInfoDelegate;
        
        private EndOperationDelegate onEndGetUDDIConnectionInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetUDDIConnectionInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUDDIConnectionInfoDelegate;
        
        private EndOperationDelegate onEndSaveUDDIConnectionInfoDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUDDIConnectionInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceManagerClient() {
        }
        
        public ServiceManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<CurrentVersionCompletedEventArgs> CurrentVersionCompleted;
        
        public event System.EventHandler<GetServiceListCompletedEventArgs> GetServiceListCompleted;
        
        public event System.EventHandler<GetProviderInfoListCompletedEventArgs> GetProviderInfoListCompleted;
        
        public event System.EventHandler<PublishAServiceCompletedEventArgs> PublishAServiceCompleted;
        
        public event System.EventHandler<DeleteAServiceCompletedEventArgs> DeleteAServiceCompleted;
        
        public event System.EventHandler<GetServiceMappingCompletedEventArgs> GetServiceMappingCompleted;
        
        public event System.EventHandler<SaveServiceMappingCompletedEventArgs> SaveServiceMappingCompleted;
        
        public event System.EventHandler<GetUDDIConnectionInfoCompletedEventArgs> GetUDDIConnectionInfoCompleted;
        
        public event System.EventHandler<SaveUDDIConnectionInfoCompletedEventArgs> SaveUDDIConnectionInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginCurrentVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCurrentVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.ServiceManager.IServiceManager.EndCurrentVersion(System.IAsyncResult result) {
            return base.Channel.EndCurrentVersion(result);
        }
        
        private System.IAsyncResult OnBeginCurrentVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginCurrentVersion(callback, asyncState);
        }
        
        private object[] OnEndCurrentVersion(System.IAsyncResult result) {
            string retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndCurrentVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrentVersionCompleted(object state) {
            if ((this.CurrentVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrentVersionCompleted(this, new CurrentVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrentVersionAsync() {
            this.CurrentVersionAsync(null);
        }
        
        public void CurrentVersionAsync(object userState) {
            if ((this.onBeginCurrentVersionDelegate == null)) {
                this.onBeginCurrentVersionDelegate = new BeginOperationDelegate(this.OnBeginCurrentVersion);
            }
            if ((this.onEndCurrentVersionDelegate == null)) {
                this.onEndCurrentVersionDelegate = new EndOperationDelegate(this.OnEndCurrentVersion);
            }
            if ((this.onCurrentVersionCompletedDelegate == null)) {
                this.onCurrentVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrentVersionCompleted);
            }
            base.InvokeAsync(this.onBeginCurrentVersionDelegate, null, this.onEndCurrentVersionDelegate, this.onCurrentVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginGetServiceList(string businessKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceList(businessKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo> IPS.ServiceManager.IServiceManager.EndGetServiceList(System.IAsyncResult result) {
            return base.Channel.EndGetServiceList(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string businessKey = ((string)(inValues[0]));
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginGetServiceList(businessKey, callback, asyncState);
        }
        
        private object[] OnEndGetServiceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo> retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndGetServiceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceListCompleted(object state) {
            if ((this.GetServiceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceListCompleted(this, new GetServiceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceListAsync(string businessKey) {
            this.GetServiceListAsync(businessKey, null);
        }
        
        public void GetServiceListAsync(string businessKey, object userState) {
            if ((this.onBeginGetServiceListDelegate == null)) {
                this.onBeginGetServiceListDelegate = new BeginOperationDelegate(this.OnBeginGetServiceList);
            }
            if ((this.onEndGetServiceListDelegate == null)) {
                this.onEndGetServiceListDelegate = new EndOperationDelegate(this.OnEndGetServiceList);
            }
            if ((this.onGetServiceListCompletedDelegate == null)) {
                this.onGetServiceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceListDelegate, new object[] {
                        businessKey}, this.onEndGetServiceListDelegate, this.onGetServiceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginGetProviderInfoList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProviderInfoList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo> IPS.ServiceManager.IServiceManager.EndGetProviderInfoList(System.IAsyncResult result) {
            return base.Channel.EndGetProviderInfoList(result);
        }
        
        private System.IAsyncResult OnBeginGetProviderInfoList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginGetProviderInfoList(callback, asyncState);
        }
        
        private object[] OnEndGetProviderInfoList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo> retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndGetProviderInfoList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProviderInfoListCompleted(object state) {
            if ((this.GetProviderInfoListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProviderInfoListCompleted(this, new GetProviderInfoListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProviderInfoListAsync() {
            this.GetProviderInfoListAsync(null);
        }
        
        public void GetProviderInfoListAsync(object userState) {
            if ((this.onBeginGetProviderInfoListDelegate == null)) {
                this.onBeginGetProviderInfoListDelegate = new BeginOperationDelegate(this.OnBeginGetProviderInfoList);
            }
            if ((this.onEndGetProviderInfoListDelegate == null)) {
                this.onEndGetProviderInfoListDelegate = new EndOperationDelegate(this.OnEndGetProviderInfoList);
            }
            if ((this.onGetProviderInfoListCompletedDelegate == null)) {
                this.onGetProviderInfoListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProviderInfoListCompleted);
            }
            base.InvokeAsync(this.onBeginGetProviderInfoListDelegate, null, this.onEndGetProviderInfoListDelegate, this.onGetProviderInfoListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginPublishAService(string providerKey, string serviceName, string endPoint, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPublishAService(providerKey, serviceName, endPoint, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IPS.ServiceManager.IServiceManager.EndPublishAService(System.IAsyncResult result) {
            return base.Channel.EndPublishAService(result);
        }
        
        private System.IAsyncResult OnBeginPublishAService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string providerKey = ((string)(inValues[0]));
            string serviceName = ((string)(inValues[1]));
            string endPoint = ((string)(inValues[2]));
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginPublishAService(providerKey, serviceName, endPoint, callback, asyncState);
        }
        
        private object[] OnEndPublishAService(System.IAsyncResult result) {
            bool retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndPublishAService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPublishAServiceCompleted(object state) {
            if ((this.PublishAServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PublishAServiceCompleted(this, new PublishAServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PublishAServiceAsync(string providerKey, string serviceName, string endPoint) {
            this.PublishAServiceAsync(providerKey, serviceName, endPoint, null);
        }
        
        public void PublishAServiceAsync(string providerKey, string serviceName, string endPoint, object userState) {
            if ((this.onBeginPublishAServiceDelegate == null)) {
                this.onBeginPublishAServiceDelegate = new BeginOperationDelegate(this.OnBeginPublishAService);
            }
            if ((this.onEndPublishAServiceDelegate == null)) {
                this.onEndPublishAServiceDelegate = new EndOperationDelegate(this.OnEndPublishAService);
            }
            if ((this.onPublishAServiceCompletedDelegate == null)) {
                this.onPublishAServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPublishAServiceCompleted);
            }
            base.InvokeAsync(this.onBeginPublishAServiceDelegate, new object[] {
                        providerKey,
                        serviceName,
                        endPoint}, this.onEndPublishAServiceDelegate, this.onPublishAServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginDeleteAService(string serviceKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAService(serviceKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IPS.ServiceManager.IServiceManager.EndDeleteAService(System.IAsyncResult result) {
            return base.Channel.EndDeleteAService(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serviceKey = ((string)(inValues[0]));
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginDeleteAService(serviceKey, callback, asyncState);
        }
        
        private object[] OnEndDeleteAService(System.IAsyncResult result) {
            bool retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndDeleteAService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteAServiceCompleted(object state) {
            if ((this.DeleteAServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAServiceCompleted(this, new DeleteAServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAServiceAsync(string serviceKey) {
            this.DeleteAServiceAsync(serviceKey, null);
        }
        
        public void DeleteAServiceAsync(string serviceKey, object userState) {
            if ((this.onBeginDeleteAServiceDelegate == null)) {
                this.onBeginDeleteAServiceDelegate = new BeginOperationDelegate(this.OnBeginDeleteAService);
            }
            if ((this.onEndDeleteAServiceDelegate == null)) {
                this.onEndDeleteAServiceDelegate = new EndOperationDelegate(this.OnEndDeleteAService);
            }
            if ((this.onDeleteAServiceCompletedDelegate == null)) {
                this.onDeleteAServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAServiceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAServiceDelegate, new object[] {
                        serviceKey}, this.onEndDeleteAServiceDelegate, this.onDeleteAServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginGetServiceMapping(string name, string UserCompany, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceMapping(name, UserCompany, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo> IPS.ServiceManager.IServiceManager.EndGetServiceMapping(System.IAsyncResult result) {
            return base.Channel.EndGetServiceMapping(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string UserCompany = ((string)(inValues[1]));
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginGetServiceMapping(name, UserCompany, callback, asyncState);
        }
        
        private object[] OnEndGetServiceMapping(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo> retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndGetServiceMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceMappingCompleted(object state) {
            if ((this.GetServiceMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceMappingCompleted(this, new GetServiceMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceMappingAsync(string name, string UserCompany) {
            this.GetServiceMappingAsync(name, UserCompany, null);
        }
        
        public void GetServiceMappingAsync(string name, string UserCompany, object userState) {
            if ((this.onBeginGetServiceMappingDelegate == null)) {
                this.onBeginGetServiceMappingDelegate = new BeginOperationDelegate(this.OnBeginGetServiceMapping);
            }
            if ((this.onEndGetServiceMappingDelegate == null)) {
                this.onEndGetServiceMappingDelegate = new EndOperationDelegate(this.OnEndGetServiceMapping);
            }
            if ((this.onGetServiceMappingCompletedDelegate == null)) {
                this.onGetServiceMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceMappingCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceMappingDelegate, new object[] {
                        name,
                        UserCompany}, this.onEndGetServiceMappingDelegate, this.onGetServiceMappingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginSaveServiceMapping(string functionName, string serviceKey, string username, string Enterprise_Name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveServiceMapping(functionName, serviceKey, username, Enterprise_Name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IPS.ServiceManager.IServiceManager.EndSaveServiceMapping(System.IAsyncResult result) {
            return base.Channel.EndSaveServiceMapping(result);
        }
        
        private System.IAsyncResult OnBeginSaveServiceMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string functionName = ((string)(inValues[0]));
            string serviceKey = ((string)(inValues[1]));
            string username = ((string)(inValues[2]));
            string Enterprise_Name = ((string)(inValues[3]));
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginSaveServiceMapping(functionName, serviceKey, username, Enterprise_Name, callback, asyncState);
        }
        
        private object[] OnEndSaveServiceMapping(System.IAsyncResult result) {
            bool retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndSaveServiceMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveServiceMappingCompleted(object state) {
            if ((this.SaveServiceMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveServiceMappingCompleted(this, new SaveServiceMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveServiceMappingAsync(string functionName, string serviceKey, string username, string Enterprise_Name) {
            this.SaveServiceMappingAsync(functionName, serviceKey, username, Enterprise_Name, null);
        }
        
        public void SaveServiceMappingAsync(string functionName, string serviceKey, string username, string Enterprise_Name, object userState) {
            if ((this.onBeginSaveServiceMappingDelegate == null)) {
                this.onBeginSaveServiceMappingDelegate = new BeginOperationDelegate(this.OnBeginSaveServiceMapping);
            }
            if ((this.onEndSaveServiceMappingDelegate == null)) {
                this.onEndSaveServiceMappingDelegate = new EndOperationDelegate(this.OnEndSaveServiceMapping);
            }
            if ((this.onSaveServiceMappingCompletedDelegate == null)) {
                this.onSaveServiceMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveServiceMappingCompleted);
            }
            base.InvokeAsync(this.onBeginSaveServiceMappingDelegate, new object[] {
                        functionName,
                        serviceKey,
                        username,
                        Enterprise_Name}, this.onEndSaveServiceMappingDelegate, this.onSaveServiceMappingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginGetUDDIConnectionInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUDDIConnectionInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPS.ServiceManager.ConnectionInfo IPS.ServiceManager.IServiceManager.EndGetUDDIConnectionInfo(System.IAsyncResult result) {
            return base.Channel.EndGetUDDIConnectionInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetUDDIConnectionInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginGetUDDIConnectionInfo(callback, asyncState);
        }
        
        private object[] OnEndGetUDDIConnectionInfo(System.IAsyncResult result) {
            IPS.ServiceManager.ConnectionInfo retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndGetUDDIConnectionInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUDDIConnectionInfoCompleted(object state) {
            if ((this.GetUDDIConnectionInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUDDIConnectionInfoCompleted(this, new GetUDDIConnectionInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUDDIConnectionInfoAsync() {
            this.GetUDDIConnectionInfoAsync(null);
        }
        
        public void GetUDDIConnectionInfoAsync(object userState) {
            if ((this.onBeginGetUDDIConnectionInfoDelegate == null)) {
                this.onBeginGetUDDIConnectionInfoDelegate = new BeginOperationDelegate(this.OnBeginGetUDDIConnectionInfo);
            }
            if ((this.onEndGetUDDIConnectionInfoDelegate == null)) {
                this.onEndGetUDDIConnectionInfoDelegate = new EndOperationDelegate(this.OnEndGetUDDIConnectionInfo);
            }
            if ((this.onGetUDDIConnectionInfoCompletedDelegate == null)) {
                this.onGetUDDIConnectionInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUDDIConnectionInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetUDDIConnectionInfoDelegate, null, this.onEndGetUDDIConnectionInfoDelegate, this.onGetUDDIConnectionInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.ServiceManager.IServiceManager.BeginSaveUDDIConnectionInfo(IPS.ServiceManager.ConnectionInfo connInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUDDIConnectionInfo(connInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool IPS.ServiceManager.IServiceManager.EndSaveUDDIConnectionInfo(System.IAsyncResult result) {
            return base.Channel.EndSaveUDDIConnectionInfo(result);
        }
        
        private System.IAsyncResult OnBeginSaveUDDIConnectionInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IPS.ServiceManager.ConnectionInfo connInfo = ((IPS.ServiceManager.ConnectionInfo)(inValues[0]));
            return ((IPS.ServiceManager.IServiceManager)(this)).BeginSaveUDDIConnectionInfo(connInfo, callback, asyncState);
        }
        
        private object[] OnEndSaveUDDIConnectionInfo(System.IAsyncResult result) {
            bool retVal = ((IPS.ServiceManager.IServiceManager)(this)).EndSaveUDDIConnectionInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUDDIConnectionInfoCompleted(object state) {
            if ((this.SaveUDDIConnectionInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUDDIConnectionInfoCompleted(this, new SaveUDDIConnectionInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUDDIConnectionInfoAsync(IPS.ServiceManager.ConnectionInfo connInfo) {
            this.SaveUDDIConnectionInfoAsync(connInfo, null);
        }
        
        public void SaveUDDIConnectionInfoAsync(IPS.ServiceManager.ConnectionInfo connInfo, object userState) {
            if ((this.onBeginSaveUDDIConnectionInfoDelegate == null)) {
                this.onBeginSaveUDDIConnectionInfoDelegate = new BeginOperationDelegate(this.OnBeginSaveUDDIConnectionInfo);
            }
            if ((this.onEndSaveUDDIConnectionInfoDelegate == null)) {
                this.onEndSaveUDDIConnectionInfoDelegate = new EndOperationDelegate(this.OnEndSaveUDDIConnectionInfo);
            }
            if ((this.onSaveUDDIConnectionInfoCompletedDelegate == null)) {
                this.onSaveUDDIConnectionInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUDDIConnectionInfoCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUDDIConnectionInfoDelegate, new object[] {
                        connInfo}, this.onEndSaveUDDIConnectionInfoDelegate, this.onSaveUDDIConnectionInfoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPS.ServiceManager.IServiceManager CreateChannel() {
            return new ServiceManagerClientChannel(this);
        }
        
        private class ServiceManagerClientChannel : ChannelBase<IPS.ServiceManager.IServiceManager>, IPS.ServiceManager.IServiceManager {
            
            public ServiceManagerClientChannel(System.ServiceModel.ClientBase<IPS.ServiceManager.IServiceManager> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCurrentVersion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("CurrentVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCurrentVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CurrentVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServiceList(string businessKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = businessKey;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo> EndGetServiceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.SVInfo>)(base.EndInvoke("GetServiceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProviderInfoList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetProviderInfoList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo> EndGetProviderInfoList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ProviderInfo>)(base.EndInvoke("GetProviderInfoList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPublishAService(string providerKey, string serviceName, string endPoint, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = providerKey;
                _args[1] = serviceName;
                _args[2] = endPoint;
                System.IAsyncResult _result = base.BeginInvoke("PublishAService", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPublishAService(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PublishAService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteAService(string serviceKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = serviceKey;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAService", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteAService(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteAService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServiceMapping(string name, string UserCompany, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = UserCompany;
                System.IAsyncResult _result = base.BeginInvoke("GetServiceMapping", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo> EndGetServiceMapping(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<IPS.ServiceManager.ServiceMappingInfo>)(base.EndInvoke("GetServiceMapping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveServiceMapping(string functionName, string serviceKey, string username, string Enterprise_Name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = functionName;
                _args[1] = serviceKey;
                _args[2] = username;
                _args[3] = Enterprise_Name;
                System.IAsyncResult _result = base.BeginInvoke("SaveServiceMapping", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveServiceMapping(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveServiceMapping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUDDIConnectionInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUDDIConnectionInfo", _args, callback, asyncState);
                return _result;
            }
            
            public IPS.ServiceManager.ConnectionInfo EndGetUDDIConnectionInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPS.ServiceManager.ConnectionInfo _result = ((IPS.ServiceManager.ConnectionInfo)(base.EndInvoke("GetUDDIConnectionInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUDDIConnectionInfo(IPS.ServiceManager.ConnectionInfo connInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = connInfo;
                System.IAsyncResult _result = base.BeginInvoke("SaveUDDIConnectionInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveUDDIConnectionInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveUDDIConnectionInfo", _args, result)));
                return _result;
            }
        }
    }
}
