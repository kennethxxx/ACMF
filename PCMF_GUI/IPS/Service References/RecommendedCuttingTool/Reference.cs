//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18444
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace IPS.RecommendedCuttingTool {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RecommendedCuttingTool.CuttingToolInterface")]
    public interface CuttingToolInterface {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/GetDriverOption", ReplyAction="http://tempuri.org/CuttingToolInterface/GetDriverOptionResponse")]
        System.IAsyncResult BeginGetDriverOption(System.AsyncCallback callback, object asyncState);
        
        string EndGetDriverOption(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/PriavateUpload", ReplyAction="http://tempuri.org/CuttingToolInterface/PriavateUploadResponse")]
        System.IAsyncResult BeginPriavateUpload(string UploadPath, string TargetPath, System.AsyncCallback callback, object asyncState);
        
        void EndPriavateUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/PriavateDownload", ReplyAction="http://tempuri.org/CuttingToolInterface/PriavateDownloadResponse")]
        System.IAsyncResult BeginPriavateDownload(string TargetPath, string SavePath, System.AsyncCallback callback, object asyncState);
        
        void EndPriavateDownload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/uploadBlob2", ReplyAction="http://tempuri.org/CuttingToolInterface/uploadBlob2Response")]
        System.IAsyncResult BeginuploadBlob2(string filename, System.AsyncCallback callback, object asyncState);
        
        string EnduploadBlob2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/getInferSelectStatus", ReplyAction="http://tempuri.org/CuttingToolInterface/getInferSelectStatusResponse")]
        System.IAsyncResult BegingetInferSelectStatus(System.AsyncCallback callback, object asyncState);
        
        string EndgetInferSelectStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/ConvertJsonFunction", ReplyAction="http://tempuri.org/CuttingToolInterface/ConvertJsonFunctionResponse")]
        System.IAsyncResult BeginConvertJsonFunction(string _converMethod, string _getString, System.AsyncCallback callback, object asyncState);
        
        string EndConvertJsonFunction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/OntologyCuttingToolInterface", ReplyAction="http://tempuri.org/CuttingToolInterface/OntologyCuttingToolInterfaceResponse")]
        System.IAsyncResult BeginOntologyCuttingToolInterface(string _userID, string _method, string _getString, string DriverOption, System.AsyncCallback callback, object asyncState);
        
        string EndOntologyCuttingToolInterface(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CuttingToolInterface/updateInferSelectStatus", ReplyAction="http://tempuri.org/CuttingToolInterface/updateInferSelectStatusResponse")]
        System.IAsyncResult BeginupdateInferSelectStatus(string NCName, string Stage, string CuttingToolNo, string SelectCT, string ReplaceableCuttingToolNo, string isselect, System.AsyncCallback callback, object asyncState);
        
        string EndupdateInferSelectStatus(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CuttingToolInterfaceChannel : IPS.RecommendedCuttingTool.CuttingToolInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDriverOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDriverOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class uploadBlob2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public uploadBlob2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInferSelectStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInferSelectStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertJsonFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertJsonFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OntologyCuttingToolInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OntologyCuttingToolInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class updateInferSelectStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public updateInferSelectStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CuttingToolInterfaceClient : System.ServiceModel.ClientBase<IPS.RecommendedCuttingTool.CuttingToolInterface>, IPS.RecommendedCuttingTool.CuttingToolInterface {
        
        private BeginOperationDelegate onBeginGetDriverOptionDelegate;
        
        private EndOperationDelegate onEndGetDriverOptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetDriverOptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginPriavateUploadDelegate;
        
        private EndOperationDelegate onEndPriavateUploadDelegate;
        
        private System.Threading.SendOrPostCallback onPriavateUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPriavateDownloadDelegate;
        
        private EndOperationDelegate onEndPriavateDownloadDelegate;
        
        private System.Threading.SendOrPostCallback onPriavateDownloadCompletedDelegate;
        
        private BeginOperationDelegate onBeginuploadBlob2Delegate;
        
        private EndOperationDelegate onEnduploadBlob2Delegate;
        
        private System.Threading.SendOrPostCallback onuploadBlob2CompletedDelegate;
        
        private BeginOperationDelegate onBegingetInferSelectStatusDelegate;
        
        private EndOperationDelegate onEndgetInferSelectStatusDelegate;
        
        private System.Threading.SendOrPostCallback ongetInferSelectStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertJsonFunctionDelegate;
        
        private EndOperationDelegate onEndConvertJsonFunctionDelegate;
        
        private System.Threading.SendOrPostCallback onConvertJsonFunctionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOntologyCuttingToolInterfaceDelegate;
        
        private EndOperationDelegate onEndOntologyCuttingToolInterfaceDelegate;
        
        private System.Threading.SendOrPostCallback onOntologyCuttingToolInterfaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateInferSelectStatusDelegate;
        
        private EndOperationDelegate onEndupdateInferSelectStatusDelegate;
        
        private System.Threading.SendOrPostCallback onupdateInferSelectStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CuttingToolInterfaceClient() {
        }
        
        public CuttingToolInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CuttingToolInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CuttingToolInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CuttingToolInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetDriverOptionCompletedEventArgs> GetDriverOptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PriavateUploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PriavateDownloadCompleted;
        
        public event System.EventHandler<uploadBlob2CompletedEventArgs> uploadBlob2Completed;
        
        public event System.EventHandler<getInferSelectStatusCompletedEventArgs> getInferSelectStatusCompleted;
        
        public event System.EventHandler<ConvertJsonFunctionCompletedEventArgs> ConvertJsonFunctionCompleted;
        
        public event System.EventHandler<OntologyCuttingToolInterfaceCompletedEventArgs> OntologyCuttingToolInterfaceCompleted;
        
        public event System.EventHandler<updateInferSelectStatusCompletedEventArgs> updateInferSelectStatusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginGetDriverOption(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDriverOption(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.RecommendedCuttingTool.CuttingToolInterface.EndGetDriverOption(System.IAsyncResult result) {
            return base.Channel.EndGetDriverOption(result);
        }
        
        private System.IAsyncResult OnBeginGetDriverOption(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginGetDriverOption(callback, asyncState);
        }
        
        private object[] OnEndGetDriverOption(System.IAsyncResult result) {
            string retVal = ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndGetDriverOption(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDriverOptionCompleted(object state) {
            if ((this.GetDriverOptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDriverOptionCompleted(this, new GetDriverOptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDriverOptionAsync() {
            this.GetDriverOptionAsync(null);
        }
        
        public void GetDriverOptionAsync(object userState) {
            if ((this.onBeginGetDriverOptionDelegate == null)) {
                this.onBeginGetDriverOptionDelegate = new BeginOperationDelegate(this.OnBeginGetDriverOption);
            }
            if ((this.onEndGetDriverOptionDelegate == null)) {
                this.onEndGetDriverOptionDelegate = new EndOperationDelegate(this.OnEndGetDriverOption);
            }
            if ((this.onGetDriverOptionCompletedDelegate == null)) {
                this.onGetDriverOptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDriverOptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetDriverOptionDelegate, null, this.onEndGetDriverOptionDelegate, this.onGetDriverOptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginPriavateUpload(string UploadPath, string TargetPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPriavateUpload(UploadPath, TargetPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void IPS.RecommendedCuttingTool.CuttingToolInterface.EndPriavateUpload(System.IAsyncResult result) {
            base.Channel.EndPriavateUpload(result);
        }
        
        private System.IAsyncResult OnBeginPriavateUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UploadPath = ((string)(inValues[0]));
            string TargetPath = ((string)(inValues[1]));
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginPriavateUpload(UploadPath, TargetPath, callback, asyncState);
        }
        
        private object[] OnEndPriavateUpload(System.IAsyncResult result) {
            ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndPriavateUpload(result);
            return null;
        }
        
        private void OnPriavateUploadCompleted(object state) {
            if ((this.PriavateUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PriavateUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PriavateUploadAsync(string UploadPath, string TargetPath) {
            this.PriavateUploadAsync(UploadPath, TargetPath, null);
        }
        
        public void PriavateUploadAsync(string UploadPath, string TargetPath, object userState) {
            if ((this.onBeginPriavateUploadDelegate == null)) {
                this.onBeginPriavateUploadDelegate = new BeginOperationDelegate(this.OnBeginPriavateUpload);
            }
            if ((this.onEndPriavateUploadDelegate == null)) {
                this.onEndPriavateUploadDelegate = new EndOperationDelegate(this.OnEndPriavateUpload);
            }
            if ((this.onPriavateUploadCompletedDelegate == null)) {
                this.onPriavateUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPriavateUploadCompleted);
            }
            base.InvokeAsync(this.onBeginPriavateUploadDelegate, new object[] {
                        UploadPath,
                        TargetPath}, this.onEndPriavateUploadDelegate, this.onPriavateUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginPriavateDownload(string TargetPath, string SavePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPriavateDownload(TargetPath, SavePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void IPS.RecommendedCuttingTool.CuttingToolInterface.EndPriavateDownload(System.IAsyncResult result) {
            base.Channel.EndPriavateDownload(result);
        }
        
        private System.IAsyncResult OnBeginPriavateDownload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string TargetPath = ((string)(inValues[0]));
            string SavePath = ((string)(inValues[1]));
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginPriavateDownload(TargetPath, SavePath, callback, asyncState);
        }
        
        private object[] OnEndPriavateDownload(System.IAsyncResult result) {
            ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndPriavateDownload(result);
            return null;
        }
        
        private void OnPriavateDownloadCompleted(object state) {
            if ((this.PriavateDownloadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PriavateDownloadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PriavateDownloadAsync(string TargetPath, string SavePath) {
            this.PriavateDownloadAsync(TargetPath, SavePath, null);
        }
        
        public void PriavateDownloadAsync(string TargetPath, string SavePath, object userState) {
            if ((this.onBeginPriavateDownloadDelegate == null)) {
                this.onBeginPriavateDownloadDelegate = new BeginOperationDelegate(this.OnBeginPriavateDownload);
            }
            if ((this.onEndPriavateDownloadDelegate == null)) {
                this.onEndPriavateDownloadDelegate = new EndOperationDelegate(this.OnEndPriavateDownload);
            }
            if ((this.onPriavateDownloadCompletedDelegate == null)) {
                this.onPriavateDownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPriavateDownloadCompleted);
            }
            base.InvokeAsync(this.onBeginPriavateDownloadDelegate, new object[] {
                        TargetPath,
                        SavePath}, this.onEndPriavateDownloadDelegate, this.onPriavateDownloadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginuploadBlob2(string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuploadBlob2(filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.RecommendedCuttingTool.CuttingToolInterface.EnduploadBlob2(System.IAsyncResult result) {
            return base.Channel.EnduploadBlob2(result);
        }
        
        private System.IAsyncResult OnBeginuploadBlob2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginuploadBlob2(filename, callback, asyncState);
        }
        
        private object[] OnEnduploadBlob2(System.IAsyncResult result) {
            string retVal = ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EnduploadBlob2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnuploadBlob2Completed(object state) {
            if ((this.uploadBlob2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.uploadBlob2Completed(this, new uploadBlob2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void uploadBlob2Async(string filename) {
            this.uploadBlob2Async(filename, null);
        }
        
        public void uploadBlob2Async(string filename, object userState) {
            if ((this.onBeginuploadBlob2Delegate == null)) {
                this.onBeginuploadBlob2Delegate = new BeginOperationDelegate(this.OnBeginuploadBlob2);
            }
            if ((this.onEnduploadBlob2Delegate == null)) {
                this.onEnduploadBlob2Delegate = new EndOperationDelegate(this.OnEnduploadBlob2);
            }
            if ((this.onuploadBlob2CompletedDelegate == null)) {
                this.onuploadBlob2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuploadBlob2Completed);
            }
            base.InvokeAsync(this.onBeginuploadBlob2Delegate, new object[] {
                        filename}, this.onEnduploadBlob2Delegate, this.onuploadBlob2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BegingetInferSelectStatus(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInferSelectStatus(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.RecommendedCuttingTool.CuttingToolInterface.EndgetInferSelectStatus(System.IAsyncResult result) {
            return base.Channel.EndgetInferSelectStatus(result);
        }
        
        private System.IAsyncResult OnBegingetInferSelectStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BegingetInferSelectStatus(callback, asyncState);
        }
        
        private object[] OnEndgetInferSelectStatus(System.IAsyncResult result) {
            string retVal = ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndgetInferSelectStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetInferSelectStatusCompleted(object state) {
            if ((this.getInferSelectStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInferSelectStatusCompleted(this, new getInferSelectStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInferSelectStatusAsync() {
            this.getInferSelectStatusAsync(null);
        }
        
        public void getInferSelectStatusAsync(object userState) {
            if ((this.onBegingetInferSelectStatusDelegate == null)) {
                this.onBegingetInferSelectStatusDelegate = new BeginOperationDelegate(this.OnBegingetInferSelectStatus);
            }
            if ((this.onEndgetInferSelectStatusDelegate == null)) {
                this.onEndgetInferSelectStatusDelegate = new EndOperationDelegate(this.OnEndgetInferSelectStatus);
            }
            if ((this.ongetInferSelectStatusCompletedDelegate == null)) {
                this.ongetInferSelectStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInferSelectStatusCompleted);
            }
            base.InvokeAsync(this.onBegingetInferSelectStatusDelegate, null, this.onEndgetInferSelectStatusDelegate, this.ongetInferSelectStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginConvertJsonFunction(string _converMethod, string _getString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertJsonFunction(_converMethod, _getString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.RecommendedCuttingTool.CuttingToolInterface.EndConvertJsonFunction(System.IAsyncResult result) {
            return base.Channel.EndConvertJsonFunction(result);
        }
        
        private System.IAsyncResult OnBeginConvertJsonFunction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _converMethod = ((string)(inValues[0]));
            string _getString = ((string)(inValues[1]));
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginConvertJsonFunction(_converMethod, _getString, callback, asyncState);
        }
        
        private object[] OnEndConvertJsonFunction(System.IAsyncResult result) {
            string retVal = ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndConvertJsonFunction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertJsonFunctionCompleted(object state) {
            if ((this.ConvertJsonFunctionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertJsonFunctionCompleted(this, new ConvertJsonFunctionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertJsonFunctionAsync(string _converMethod, string _getString) {
            this.ConvertJsonFunctionAsync(_converMethod, _getString, null);
        }
        
        public void ConvertJsonFunctionAsync(string _converMethod, string _getString, object userState) {
            if ((this.onBeginConvertJsonFunctionDelegate == null)) {
                this.onBeginConvertJsonFunctionDelegate = new BeginOperationDelegate(this.OnBeginConvertJsonFunction);
            }
            if ((this.onEndConvertJsonFunctionDelegate == null)) {
                this.onEndConvertJsonFunctionDelegate = new EndOperationDelegate(this.OnEndConvertJsonFunction);
            }
            if ((this.onConvertJsonFunctionCompletedDelegate == null)) {
                this.onConvertJsonFunctionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertJsonFunctionCompleted);
            }
            base.InvokeAsync(this.onBeginConvertJsonFunctionDelegate, new object[] {
                        _converMethod,
                        _getString}, this.onEndConvertJsonFunctionDelegate, this.onConvertJsonFunctionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginOntologyCuttingToolInterface(string _userID, string _method, string _getString, string DriverOption, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOntologyCuttingToolInterface(_userID, _method, _getString, DriverOption, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.RecommendedCuttingTool.CuttingToolInterface.EndOntologyCuttingToolInterface(System.IAsyncResult result) {
            return base.Channel.EndOntologyCuttingToolInterface(result);
        }
        
        private System.IAsyncResult OnBeginOntologyCuttingToolInterface(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _method = ((string)(inValues[1]));
            string _getString = ((string)(inValues[2]));
            string DriverOption = ((string)(inValues[3]));
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginOntologyCuttingToolInterface(_userID, _method, _getString, DriverOption, callback, asyncState);
        }
        
        private object[] OnEndOntologyCuttingToolInterface(System.IAsyncResult result) {
            string retVal = ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndOntologyCuttingToolInterface(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOntologyCuttingToolInterfaceCompleted(object state) {
            if ((this.OntologyCuttingToolInterfaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OntologyCuttingToolInterfaceCompleted(this, new OntologyCuttingToolInterfaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OntologyCuttingToolInterfaceAsync(string _userID, string _method, string _getString, string DriverOption) {
            this.OntologyCuttingToolInterfaceAsync(_userID, _method, _getString, DriverOption, null);
        }
        
        public void OntologyCuttingToolInterfaceAsync(string _userID, string _method, string _getString, string DriverOption, object userState) {
            if ((this.onBeginOntologyCuttingToolInterfaceDelegate == null)) {
                this.onBeginOntologyCuttingToolInterfaceDelegate = new BeginOperationDelegate(this.OnBeginOntologyCuttingToolInterface);
            }
            if ((this.onEndOntologyCuttingToolInterfaceDelegate == null)) {
                this.onEndOntologyCuttingToolInterfaceDelegate = new EndOperationDelegate(this.OnEndOntologyCuttingToolInterface);
            }
            if ((this.onOntologyCuttingToolInterfaceCompletedDelegate == null)) {
                this.onOntologyCuttingToolInterfaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOntologyCuttingToolInterfaceCompleted);
            }
            base.InvokeAsync(this.onBeginOntologyCuttingToolInterfaceDelegate, new object[] {
                        _userID,
                        _method,
                        _getString,
                        DriverOption}, this.onEndOntologyCuttingToolInterfaceDelegate, this.onOntologyCuttingToolInterfaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.RecommendedCuttingTool.CuttingToolInterface.BeginupdateInferSelectStatus(string NCName, string Stage, string CuttingToolNo, string SelectCT, string ReplaceableCuttingToolNo, string isselect, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateInferSelectStatus(NCName, Stage, CuttingToolNo, SelectCT, ReplaceableCuttingToolNo, isselect, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.RecommendedCuttingTool.CuttingToolInterface.EndupdateInferSelectStatus(System.IAsyncResult result) {
            return base.Channel.EndupdateInferSelectStatus(result);
        }
        
        private System.IAsyncResult OnBeginupdateInferSelectStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string NCName = ((string)(inValues[0]));
            string Stage = ((string)(inValues[1]));
            string CuttingToolNo = ((string)(inValues[2]));
            string SelectCT = ((string)(inValues[3]));
            string ReplaceableCuttingToolNo = ((string)(inValues[4]));
            string isselect = ((string)(inValues[5]));
            return ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).BeginupdateInferSelectStatus(NCName, Stage, CuttingToolNo, SelectCT, ReplaceableCuttingToolNo, isselect, callback, asyncState);
        }
        
        private object[] OnEndupdateInferSelectStatus(System.IAsyncResult result) {
            string retVal = ((IPS.RecommendedCuttingTool.CuttingToolInterface)(this)).EndupdateInferSelectStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnupdateInferSelectStatusCompleted(object state) {
            if ((this.updateInferSelectStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateInferSelectStatusCompleted(this, new updateInferSelectStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateInferSelectStatusAsync(string NCName, string Stage, string CuttingToolNo, string SelectCT, string ReplaceableCuttingToolNo, string isselect) {
            this.updateInferSelectStatusAsync(NCName, Stage, CuttingToolNo, SelectCT, ReplaceableCuttingToolNo, isselect, null);
        }
        
        public void updateInferSelectStatusAsync(string NCName, string Stage, string CuttingToolNo, string SelectCT, string ReplaceableCuttingToolNo, string isselect, object userState) {
            if ((this.onBeginupdateInferSelectStatusDelegate == null)) {
                this.onBeginupdateInferSelectStatusDelegate = new BeginOperationDelegate(this.OnBeginupdateInferSelectStatus);
            }
            if ((this.onEndupdateInferSelectStatusDelegate == null)) {
                this.onEndupdateInferSelectStatusDelegate = new EndOperationDelegate(this.OnEndupdateInferSelectStatus);
            }
            if ((this.onupdateInferSelectStatusCompletedDelegate == null)) {
                this.onupdateInferSelectStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateInferSelectStatusCompleted);
            }
            base.InvokeAsync(this.onBeginupdateInferSelectStatusDelegate, new object[] {
                        NCName,
                        Stage,
                        CuttingToolNo,
                        SelectCT,
                        ReplaceableCuttingToolNo,
                        isselect}, this.onEndupdateInferSelectStatusDelegate, this.onupdateInferSelectStatusCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPS.RecommendedCuttingTool.CuttingToolInterface CreateChannel() {
            return new CuttingToolInterfaceClientChannel(this);
        }
        
        private class CuttingToolInterfaceClientChannel : ChannelBase<IPS.RecommendedCuttingTool.CuttingToolInterface>, IPS.RecommendedCuttingTool.CuttingToolInterface {
            
            public CuttingToolInterfaceClientChannel(System.ServiceModel.ClientBase<IPS.RecommendedCuttingTool.CuttingToolInterface> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetDriverOption(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDriverOption", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDriverOption(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDriverOption", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPriavateUpload(string UploadPath, string TargetPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UploadPath;
                _args[1] = TargetPath;
                System.IAsyncResult _result = base.BeginInvoke("PriavateUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPriavateUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PriavateUpload", _args, result);
            }
            
            public System.IAsyncResult BeginPriavateDownload(string TargetPath, string SavePath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = TargetPath;
                _args[1] = SavePath;
                System.IAsyncResult _result = base.BeginInvoke("PriavateDownload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPriavateDownload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PriavateDownload", _args, result);
            }
            
            public System.IAsyncResult BeginuploadBlob2(string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("uploadBlob2", _args, callback, asyncState);
                return _result;
            }
            
            public string EnduploadBlob2(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("uploadBlob2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetInferSelectStatus(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getInferSelectStatus", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetInferSelectStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getInferSelectStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConvertJsonFunction(string _converMethod, string _getString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = _converMethod;
                _args[1] = _getString;
                System.IAsyncResult _result = base.BeginInvoke("ConvertJsonFunction", _args, callback, asyncState);
                return _result;
            }
            
            public string EndConvertJsonFunction(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ConvertJsonFunction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOntologyCuttingToolInterface(string _userID, string _method, string _getString, string DriverOption, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = _userID;
                _args[1] = _method;
                _args[2] = _getString;
                _args[3] = DriverOption;
                System.IAsyncResult _result = base.BeginInvoke("OntologyCuttingToolInterface", _args, callback, asyncState);
                return _result;
            }
            
            public string EndOntologyCuttingToolInterface(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("OntologyCuttingToolInterface", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginupdateInferSelectStatus(string NCName, string Stage, string CuttingToolNo, string SelectCT, string ReplaceableCuttingToolNo, string isselect, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = NCName;
                _args[1] = Stage;
                _args[2] = CuttingToolNo;
                _args[3] = SelectCT;
                _args[4] = ReplaceableCuttingToolNo;
                _args[5] = isselect;
                System.IAsyncResult _result = base.BeginInvoke("updateInferSelectStatus", _args, callback, asyncState);
                return _result;
            }
            
            public string EndupdateInferSelectStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("updateInferSelectStatus", _args, result)));
                return _result;
            }
        }
    }
}
