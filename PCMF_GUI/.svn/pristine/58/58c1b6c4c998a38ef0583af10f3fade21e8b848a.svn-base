//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.17929
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace IPS.UploadFileService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadFileInfo", Namespace="http://schemas.datacontract.org/2004/07/FileUploadService")]
    public partial class UploadFileInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FileStoreUrlField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileStoreUrl {
            get {
                return this.FileStoreUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileStoreUrlField, value) != true)) {
                    this.FileStoreUrlField = value;
                    this.RaisePropertyChanged("FileStoreUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UploadFileService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveFile", ReplyAction="http://tempuri.org/IService1/SaveFileResponse")]
        System.IAsyncResult BeginSaveFile(IPS.UploadFileService.FileUploadMessage request, System.AsyncCallback callback, object asyncState);
        
        IPS.UploadFileService.FileUploadMessage EndSaveFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetFileData", ReplyAction="http://tempuri.org/IService1/GetFileDataResponse")]
        System.IAsyncResult BeginGetFileData(OMC.UploadFileService.UploadFile value, System.AsyncCallback callback, object asyncState);
        
        string EndGetFileData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveFile2", ReplyAction="http://tempuri.org/IService1/SaveFile2Response")]
        System.IAsyncResult BeginSaveFile2(OMC.UploadFileService.UploadFile uploadFile, string createName, System.AsyncCallback callback, object asyncState);
        
        string EndSaveFile2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DoUpload", ReplyAction="http://tempuri.org/IService1/DoUploadResponse")]
        System.IAsyncResult BeginDoUpload(string filename, byte[] content, bool append, string createFolderName, System.AsyncCallback callback, object asyncState);
        
        IPS.UploadFileService.UploadFileInfo EndDoUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ActionUpload", ReplyAction="http://tempuri.org/IService1/ActionUploadResponse")]
        System.IAsyncResult BeginActionUpload(string fileName, byte[] fileContext, bool isAppend, string createFolderName, System.AsyncCallback callback, object asyncState);
        
        void EndActionUpload(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] FileData;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(byte[] FileData) {
            this.FileData = FileData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : IPS.UploadFileService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveFile2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveFile2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IPS.UploadFileService.UploadFileInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IPS.UploadFileService.UploadFileInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<IPS.UploadFileService.IService1>, IPS.UploadFileService.IService1 {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFileDelegate;
        
        private EndOperationDelegate onEndSaveFileDelegate;
        
        private System.Threading.SendOrPostCallback onSaveFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileDataDelegate;
        
        private EndOperationDelegate onEndGetFileDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveFile2Delegate;
        
        private EndOperationDelegate onEndSaveFile2Delegate;
        
        private System.Threading.SendOrPostCallback onSaveFile2CompletedDelegate;
        
        private BeginOperationDelegate onBeginDoUploadDelegate;
        
        private EndOperationDelegate onEndDoUploadDelegate;
        
        private System.Threading.SendOrPostCallback onDoUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginActionUploadDelegate;
        
        private EndOperationDelegate onEndActionUploadDelegate;
        
        private System.Threading.SendOrPostCallback onActionUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<SaveFileCompletedEventArgs> SaveFileCompleted;
        
        public event System.EventHandler<GetFileDataCompletedEventArgs> GetFileDataCompleted;
        
        public event System.EventHandler<SaveFile2CompletedEventArgs> SaveFile2Completed;
        
        public event System.EventHandler<DoUploadCompletedEventArgs> DoUploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ActionUploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.UploadFileService.IService1.BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.UploadFileService.IService1.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return ((IPS.UploadFileService.IService1)(this)).BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = ((IPS.UploadFileService.IService1)(this)).EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.UploadFileService.IService1.BeginSaveFile(IPS.UploadFileService.FileUploadMessage request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginSaveFile(byte[] FileData, System.AsyncCallback callback, object asyncState) {
            IPS.UploadFileService.FileUploadMessage inValue = new IPS.UploadFileService.FileUploadMessage();
            inValue.FileData = FileData;
            return ((IPS.UploadFileService.IService1)(this)).BeginSaveFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPS.UploadFileService.FileUploadMessage IPS.UploadFileService.IService1.EndSaveFile(System.IAsyncResult result) {
            return base.Channel.EndSaveFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private byte[] EndSaveFile(System.IAsyncResult result) {
            IPS.UploadFileService.FileUploadMessage retVal = ((IPS.UploadFileService.IService1)(this)).EndSaveFile(result);
            return retVal.FileData;
        }
        
        private System.IAsyncResult OnBeginSaveFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] FileData = ((byte[])(inValues[0]));
            return this.BeginSaveFile(FileData, callback, asyncState);
        }
        
        private object[] OnEndSaveFile(System.IAsyncResult result) {
            byte[] retVal = this.EndSaveFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveFileCompleted(object state) {
            if ((this.SaveFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFileCompleted(this, new SaveFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFileAsync(byte[] FileData) {
            this.SaveFileAsync(FileData, null);
        }
        
        public void SaveFileAsync(byte[] FileData, object userState) {
            if ((this.onBeginSaveFileDelegate == null)) {
                this.onBeginSaveFileDelegate = new BeginOperationDelegate(this.OnBeginSaveFile);
            }
            if ((this.onEndSaveFileDelegate == null)) {
                this.onEndSaveFileDelegate = new EndOperationDelegate(this.OnEndSaveFile);
            }
            if ((this.onSaveFileCompletedDelegate == null)) {
                this.onSaveFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFileCompleted);
            }
            base.InvokeAsync(this.onBeginSaveFileDelegate, new object[] {
                        FileData}, this.onEndSaveFileDelegate, this.onSaveFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.UploadFileService.IService1.BeginGetFileData(OMC.UploadFileService.UploadFile value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.UploadFileService.IService1.EndGetFileData(System.IAsyncResult result) {
            return base.Channel.EndGetFileData(result);
        }
        
        private System.IAsyncResult OnBeginGetFileData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            OMC.UploadFileService.UploadFile value = ((OMC.UploadFileService.UploadFile)(inValues[0]));
            return ((IPS.UploadFileService.IService1)(this)).BeginGetFileData(value, callback, asyncState);
        }
        
        private object[] OnEndGetFileData(System.IAsyncResult result) {
            string retVal = ((IPS.UploadFileService.IService1)(this)).EndGetFileData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileDataCompleted(object state) {
            if ((this.GetFileDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileDataCompleted(this, new GetFileDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileDataAsync(OMC.UploadFileService.UploadFile value) {
            this.GetFileDataAsync(value, null);
        }
        
        public void GetFileDataAsync(OMC.UploadFileService.UploadFile value, object userState) {
            if ((this.onBeginGetFileDataDelegate == null)) {
                this.onBeginGetFileDataDelegate = new BeginOperationDelegate(this.OnBeginGetFileData);
            }
            if ((this.onEndGetFileDataDelegate == null)) {
                this.onEndGetFileDataDelegate = new EndOperationDelegate(this.OnEndGetFileData);
            }
            if ((this.onGetFileDataCompletedDelegate == null)) {
                this.onGetFileDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileDataDelegate, new object[] {
                        value}, this.onEndGetFileDataDelegate, this.onGetFileDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.UploadFileService.IService1.BeginSaveFile2(OMC.UploadFileService.UploadFile uploadFile, string createName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveFile2(uploadFile, createName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.UploadFileService.IService1.EndSaveFile2(System.IAsyncResult result) {
            return base.Channel.EndSaveFile2(result);
        }
        
        private System.IAsyncResult OnBeginSaveFile2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            OMC.UploadFileService.UploadFile uploadFile = ((OMC.UploadFileService.UploadFile)(inValues[0]));
            string createName = ((string)(inValues[1]));
            return ((IPS.UploadFileService.IService1)(this)).BeginSaveFile2(uploadFile, createName, callback, asyncState);
        }
        
        private object[] OnEndSaveFile2(System.IAsyncResult result) {
            string retVal = ((IPS.UploadFileService.IService1)(this)).EndSaveFile2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveFile2Completed(object state) {
            if ((this.SaveFile2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveFile2Completed(this, new SaveFile2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveFile2Async(OMC.UploadFileService.UploadFile uploadFile, string createName) {
            this.SaveFile2Async(uploadFile, createName, null);
        }
        
        public void SaveFile2Async(OMC.UploadFileService.UploadFile uploadFile, string createName, object userState) {
            if ((this.onBeginSaveFile2Delegate == null)) {
                this.onBeginSaveFile2Delegate = new BeginOperationDelegate(this.OnBeginSaveFile2);
            }
            if ((this.onEndSaveFile2Delegate == null)) {
                this.onEndSaveFile2Delegate = new EndOperationDelegate(this.OnEndSaveFile2);
            }
            if ((this.onSaveFile2CompletedDelegate == null)) {
                this.onSaveFile2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveFile2Completed);
            }
            base.InvokeAsync(this.onBeginSaveFile2Delegate, new object[] {
                        uploadFile,
                        createName}, this.onEndSaveFile2Delegate, this.onSaveFile2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.UploadFileService.IService1.BeginDoUpload(string filename, byte[] content, bool append, string createFolderName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoUpload(filename, content, append, createFolderName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPS.UploadFileService.UploadFileInfo IPS.UploadFileService.IService1.EndDoUpload(System.IAsyncResult result) {
            return base.Channel.EndDoUpload(result);
        }
        
        private System.IAsyncResult OnBeginDoUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            byte[] content = ((byte[])(inValues[1]));
            bool append = ((bool)(inValues[2]));
            string createFolderName = ((string)(inValues[3]));
            return ((IPS.UploadFileService.IService1)(this)).BeginDoUpload(filename, content, append, createFolderName, callback, asyncState);
        }
        
        private object[] OnEndDoUpload(System.IAsyncResult result) {
            IPS.UploadFileService.UploadFileInfo retVal = ((IPS.UploadFileService.IService1)(this)).EndDoUpload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoUploadCompleted(object state) {
            if ((this.DoUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoUploadCompleted(this, new DoUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoUploadAsync(string filename, byte[] content, bool append, string createFolderName) {
            this.DoUploadAsync(filename, content, append, createFolderName, null);
        }
        
        public void DoUploadAsync(string filename, byte[] content, bool append, string createFolderName, object userState) {
            if ((this.onBeginDoUploadDelegate == null)) {
                this.onBeginDoUploadDelegate = new BeginOperationDelegate(this.OnBeginDoUpload);
            }
            if ((this.onEndDoUploadDelegate == null)) {
                this.onEndDoUploadDelegate = new EndOperationDelegate(this.OnEndDoUpload);
            }
            if ((this.onDoUploadCompletedDelegate == null)) {
                this.onDoUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoUploadCompleted);
            }
            base.InvokeAsync(this.onBeginDoUploadDelegate, new object[] {
                        filename,
                        content,
                        append,
                        createFolderName}, this.onEndDoUploadDelegate, this.onDoUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.UploadFileService.IService1.BeginActionUpload(string fileName, byte[] fileContext, bool isAppend, string createFolderName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginActionUpload(fileName, fileContext, isAppend, createFolderName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void IPS.UploadFileService.IService1.EndActionUpload(System.IAsyncResult result) {
            base.Channel.EndActionUpload(result);
        }
        
        private System.IAsyncResult OnBeginActionUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            byte[] fileContext = ((byte[])(inValues[1]));
            bool isAppend = ((bool)(inValues[2]));
            string createFolderName = ((string)(inValues[3]));
            return ((IPS.UploadFileService.IService1)(this)).BeginActionUpload(fileName, fileContext, isAppend, createFolderName, callback, asyncState);
        }
        
        private object[] OnEndActionUpload(System.IAsyncResult result) {
            ((IPS.UploadFileService.IService1)(this)).EndActionUpload(result);
            return null;
        }
        
        private void OnActionUploadCompleted(object state) {
            if ((this.ActionUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ActionUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ActionUploadAsync(string fileName, byte[] fileContext, bool isAppend, string createFolderName) {
            this.ActionUploadAsync(fileName, fileContext, isAppend, createFolderName, null);
        }
        
        public void ActionUploadAsync(string fileName, byte[] fileContext, bool isAppend, string createFolderName, object userState) {
            if ((this.onBeginActionUploadDelegate == null)) {
                this.onBeginActionUploadDelegate = new BeginOperationDelegate(this.OnBeginActionUpload);
            }
            if ((this.onEndActionUploadDelegate == null)) {
                this.onEndActionUploadDelegate = new EndOperationDelegate(this.OnEndActionUpload);
            }
            if ((this.onActionUploadCompletedDelegate == null)) {
                this.onActionUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnActionUploadCompleted);
            }
            base.InvokeAsync(this.onBeginActionUploadDelegate, new object[] {
                        fileName,
                        fileContext,
                        isAppend,
                        createFolderName}, this.onEndActionUploadDelegate, this.onActionUploadCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPS.UploadFileService.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<IPS.UploadFileService.IService1>, IPS.UploadFileService.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<IPS.UploadFileService.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("GetData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveFile(IPS.UploadFileService.FileUploadMessage request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SaveFile", _args, callback, asyncState);
                return _result;
            }
            
            public IPS.UploadFileService.FileUploadMessage EndSaveFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPS.UploadFileService.FileUploadMessage _result = ((IPS.UploadFileService.FileUploadMessage)(base.EndInvoke("SaveFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileData(OMC.UploadFileService.UploadFile value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("GetFileData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFileData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetFileData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveFile2(OMC.UploadFileService.UploadFile uploadFile, string createName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = uploadFile;
                _args[1] = createName;
                System.IAsyncResult _result = base.BeginInvoke("SaveFile2", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveFile2(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveFile2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDoUpload(string filename, byte[] content, bool append, string createFolderName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = filename;
                _args[1] = content;
                _args[2] = append;
                _args[3] = createFolderName;
                System.IAsyncResult _result = base.BeginInvoke("DoUpload", _args, callback, asyncState);
                return _result;
            }
            
            public IPS.UploadFileService.UploadFileInfo EndDoUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPS.UploadFileService.UploadFileInfo _result = ((IPS.UploadFileService.UploadFileInfo)(base.EndInvoke("DoUpload", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginActionUpload(string fileName, byte[] fileContext, bool isAppend, string createFolderName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = fileName;
                _args[1] = fileContext;
                _args[2] = isAppend;
                _args[3] = createFolderName;
                System.IAsyncResult _result = base.BeginInvoke("ActionUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndActionUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ActionUpload", _args, result);
            }
        }
    }
}
