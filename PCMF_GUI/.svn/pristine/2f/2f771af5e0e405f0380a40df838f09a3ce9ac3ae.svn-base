//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.17929
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace IPS.OntologyService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/OntologyServiceWCFInterface")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OntologyService.IOntologyService")]
    public interface IOntologyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/GetData", ReplyAction="http://tempuri.org/IOntologyService/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IOntologyService/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(IPS.OntologyService.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        IPS.OntologyService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/sendTable", ReplyAction="http://tempuri.org/IOntologyService/sendTableResponse")]
        System.IAsyncResult BeginsendTable(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, System.AsyncCallback callback, object asyncState);
        
        string EndsendTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/getTable", ReplyAction="http://tempuri.org/IOntologyService/getTableResponse")]
        System.IAsyncResult BegingetTable(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, System.AsyncCallback callback, object asyncState);
        
        string EndgetTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/OntologySystemInterface", ReplyAction="http://tempuri.org/IOntologyService/OntologySystemInterfaceResponse")]
        System.IAsyncResult BeginOntologySystemInterface(string _userID, string _method, string _getString, System.AsyncCallback callback, object asyncState);
        
        string EndOntologySystemInterface(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/ConvertJsonFunction", ReplyAction="http://tempuri.org/IOntologyService/ConvertJsonFunctionResponse")]
        System.IAsyncResult BeginConvertJsonFunction(string _converMethod, string _getString, System.AsyncCallback callback, object asyncState);
        
        string EndConvertJsonFunction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/insertloop", ReplyAction="http://tempuri.org/IOntologyService/insertloopResponse")]
        System.IAsyncResult Begininsertloop(System.AsyncCallback callback, object asyncState);
        
        void Endinsertloop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/TimeDisplay", ReplyAction="http://tempuri.org/IOntologyService/TimeDisplayResponse")]
        System.IAsyncResult BeginTimeDisplay(System.AsyncCallback callback, object asyncState);
        
        string EndTimeDisplay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/OntSysTesting", ReplyAction="http://tempuri.org/IOntologyService/OntSysTestingResponse")]
        System.IAsyncResult BeginOntSysTesting(string _userID, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, bool _isLock, System.AsyncCallback callback, object asyncState);
        
        string EndOntSysTesting(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/sendTableTestingVersion", ReplyAction="http://tempuri.org/IOntologyService/sendTableTestingVersionResponse")]
        System.IAsyncResult BeginsendTableTestingVersion(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, System.AsyncCallback callback, object asyncState);
        
        string EndsendTableTestingVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/getTableTestingVersion", ReplyAction="http://tempuri.org/IOntologyService/getTableTestingVersionResponse")]
        System.IAsyncResult BegingetTableTestingVersion(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, bool isMatchData, System.AsyncCallback callback, object asyncState);
        
        string EndgetTableTestingVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IOntologyService/updateTableTestingVersion", ReplyAction="http://tempuri.org/IOntologyService/updateTableTestingVersionResponse")]
        System.IAsyncResult BeginupdateTableTestingVersion(string _userNume, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, string result, System.AsyncCallback callback, object asyncState);
        
        string EndupdateTableTestingVersion(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOntologyServiceChannel : IPS.OntologyService.IOntologyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IPS.OntologyService.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IPS.OntologyService.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class sendTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public sendTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OntologySystemInterfaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OntologySystemInterfaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertJsonFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertJsonFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeDisplayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TimeDisplayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OntSysTestingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OntSysTestingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class sendTableTestingVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public sendTableTestingVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTableTestingVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTableTestingVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class updateTableTestingVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public updateTableTestingVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OntologyServiceClient : System.ServiceModel.ClientBase<IPS.OntologyService.IOntologyService>, IPS.OntologyService.IOntologyService {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginsendTableDelegate;
        
        private EndOperationDelegate onEndsendTableDelegate;
        
        private System.Threading.SendOrPostCallback onsendTableCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTableDelegate;
        
        private EndOperationDelegate onEndgetTableDelegate;
        
        private System.Threading.SendOrPostCallback ongetTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginOntologySystemInterfaceDelegate;
        
        private EndOperationDelegate onEndOntologySystemInterfaceDelegate;
        
        private System.Threading.SendOrPostCallback onOntologySystemInterfaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertJsonFunctionDelegate;
        
        private EndOperationDelegate onEndConvertJsonFunctionDelegate;
        
        private System.Threading.SendOrPostCallback onConvertJsonFunctionCompletedDelegate;
        
        private BeginOperationDelegate onBegininsertloopDelegate;
        
        private EndOperationDelegate onEndinsertloopDelegate;
        
        private System.Threading.SendOrPostCallback oninsertloopCompletedDelegate;
        
        private BeginOperationDelegate onBeginTimeDisplayDelegate;
        
        private EndOperationDelegate onEndTimeDisplayDelegate;
        
        private System.Threading.SendOrPostCallback onTimeDisplayCompletedDelegate;
        
        private BeginOperationDelegate onBeginOntSysTestingDelegate;
        
        private EndOperationDelegate onEndOntSysTestingDelegate;
        
        private System.Threading.SendOrPostCallback onOntSysTestingCompletedDelegate;
        
        private BeginOperationDelegate onBeginsendTableTestingVersionDelegate;
        
        private EndOperationDelegate onEndsendTableTestingVersionDelegate;
        
        private System.Threading.SendOrPostCallback onsendTableTestingVersionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTableTestingVersionDelegate;
        
        private EndOperationDelegate onEndgetTableTestingVersionDelegate;
        
        private System.Threading.SendOrPostCallback ongetTableTestingVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateTableTestingVersionDelegate;
        
        private EndOperationDelegate onEndupdateTableTestingVersionDelegate;
        
        private System.Threading.SendOrPostCallback onupdateTableTestingVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public OntologyServiceClient() {
        }
        
        public OntologyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OntologyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OntologyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OntologyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<sendTableCompletedEventArgs> sendTableCompleted;
        
        public event System.EventHandler<getTableCompletedEventArgs> getTableCompleted;
        
        public event System.EventHandler<OntologySystemInterfaceCompletedEventArgs> OntologySystemInterfaceCompleted;
        
        public event System.EventHandler<ConvertJsonFunctionCompletedEventArgs> ConvertJsonFunctionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> insertloopCompleted;
        
        public event System.EventHandler<TimeDisplayCompletedEventArgs> TimeDisplayCompleted;
        
        public event System.EventHandler<OntSysTestingCompletedEventArgs> OntSysTestingCompleted;
        
        public event System.EventHandler<sendTableTestingVersionCompletedEventArgs> sendTableTestingVersionCompleted;
        
        public event System.EventHandler<getTableTestingVersionCompletedEventArgs> getTableTestingVersionCompleted;
        
        public event System.EventHandler<updateTableTestingVersionCompletedEventArgs> updateTableTestingVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginGetDataUsingDataContract(IPS.OntologyService.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IPS.OntologyService.CompositeType IPS.OntologyService.IOntologyService.EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IPS.OntologyService.CompositeType composite = ((IPS.OntologyService.CompositeType)(inValues[0]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            IPS.OntologyService.CompositeType retVal = ((IPS.OntologyService.IOntologyService)(this)).EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(IPS.OntologyService.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(IPS.OntologyService.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginsendTable(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsendTable(_userID, _currentstep, _laststep, _functionCodeIndicator, _functionData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndsendTable(System.IAsyncResult result) {
            return base.Channel.EndsendTable(result);
        }
        
        private System.IAsyncResult OnBeginsendTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _currentstep = ((string)(inValues[1]));
            string _laststep = ((string)(inValues[2]));
            string _functionCodeIndicator = ((string)(inValues[3]));
            string _functionData = ((string)(inValues[4]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginsendTable(_userID, _currentstep, _laststep, _functionCodeIndicator, _functionData, callback, asyncState);
        }
        
        private object[] OnEndsendTable(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndsendTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsendTableCompleted(object state) {
            if ((this.sendTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.sendTableCompleted(this, new sendTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void sendTableAsync(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData) {
            this.sendTableAsync(_userID, _currentstep, _laststep, _functionCodeIndicator, _functionData, null);
        }
        
        public void sendTableAsync(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, object userState) {
            if ((this.onBeginsendTableDelegate == null)) {
                this.onBeginsendTableDelegate = new BeginOperationDelegate(this.OnBeginsendTable);
            }
            if ((this.onEndsendTableDelegate == null)) {
                this.onEndsendTableDelegate = new EndOperationDelegate(this.OnEndsendTable);
            }
            if ((this.onsendTableCompletedDelegate == null)) {
                this.onsendTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsendTableCompleted);
            }
            base.InvokeAsync(this.onBeginsendTableDelegate, new object[] {
                        _userID,
                        _currentstep,
                        _laststep,
                        _functionCodeIndicator,
                        _functionData}, this.onEndsendTableDelegate, this.onsendTableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BegingetTable(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTable(_userID, _currentstep, _laststep, _functionCodeIndicator, _functionData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndgetTable(System.IAsyncResult result) {
            return base.Channel.EndgetTable(result);
        }
        
        private System.IAsyncResult OnBegingetTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _currentstep = ((string)(inValues[1]));
            string _laststep = ((string)(inValues[2]));
            string _functionCodeIndicator = ((string)(inValues[3]));
            string _functionData = ((string)(inValues[4]));
            return ((IPS.OntologyService.IOntologyService)(this)).BegingetTable(_userID, _currentstep, _laststep, _functionCodeIndicator, _functionData, callback, asyncState);
        }
        
        private object[] OnEndgetTable(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndgetTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTableCompleted(object state) {
            if ((this.getTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTableCompleted(this, new getTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTableAsync(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData) {
            this.getTableAsync(_userID, _currentstep, _laststep, _functionCodeIndicator, _functionData, null);
        }
        
        public void getTableAsync(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, object userState) {
            if ((this.onBegingetTableDelegate == null)) {
                this.onBegingetTableDelegate = new BeginOperationDelegate(this.OnBegingetTable);
            }
            if ((this.onEndgetTableDelegate == null)) {
                this.onEndgetTableDelegate = new EndOperationDelegate(this.OnEndgetTable);
            }
            if ((this.ongetTableCompletedDelegate == null)) {
                this.ongetTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTableCompleted);
            }
            base.InvokeAsync(this.onBegingetTableDelegate, new object[] {
                        _userID,
                        _currentstep,
                        _laststep,
                        _functionCodeIndicator,
                        _functionData}, this.onEndgetTableDelegate, this.ongetTableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginOntologySystemInterface(string _userID, string _method, string _getString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOntologySystemInterface(_userID, _method, _getString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndOntologySystemInterface(System.IAsyncResult result) {
            return base.Channel.EndOntologySystemInterface(result);
        }
        
        private System.IAsyncResult OnBeginOntologySystemInterface(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _method = ((string)(inValues[1]));
            string _getString = ((string)(inValues[2]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginOntologySystemInterface(_userID, _method, _getString, callback, asyncState);
        }
        
        private object[] OnEndOntologySystemInterface(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndOntologySystemInterface(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOntologySystemInterfaceCompleted(object state) {
            if ((this.OntologySystemInterfaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OntologySystemInterfaceCompleted(this, new OntologySystemInterfaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OntologySystemInterfaceAsync(string _userID, string _method, string _getString) {
            this.OntologySystemInterfaceAsync(_userID, _method, _getString, null);
        }
        
        public void OntologySystemInterfaceAsync(string _userID, string _method, string _getString, object userState) {
            if ((this.onBeginOntologySystemInterfaceDelegate == null)) {
                this.onBeginOntologySystemInterfaceDelegate = new BeginOperationDelegate(this.OnBeginOntologySystemInterface);
            }
            if ((this.onEndOntologySystemInterfaceDelegate == null)) {
                this.onEndOntologySystemInterfaceDelegate = new EndOperationDelegate(this.OnEndOntologySystemInterface);
            }
            if ((this.onOntologySystemInterfaceCompletedDelegate == null)) {
                this.onOntologySystemInterfaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOntologySystemInterfaceCompleted);
            }
            base.InvokeAsync(this.onBeginOntologySystemInterfaceDelegate, new object[] {
                        _userID,
                        _method,
                        _getString}, this.onEndOntologySystemInterfaceDelegate, this.onOntologySystemInterfaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginConvertJsonFunction(string _converMethod, string _getString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertJsonFunction(_converMethod, _getString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndConvertJsonFunction(System.IAsyncResult result) {
            return base.Channel.EndConvertJsonFunction(result);
        }
        
        private System.IAsyncResult OnBeginConvertJsonFunction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _converMethod = ((string)(inValues[0]));
            string _getString = ((string)(inValues[1]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginConvertJsonFunction(_converMethod, _getString, callback, asyncState);
        }
        
        private object[] OnEndConvertJsonFunction(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndConvertJsonFunction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertJsonFunctionCompleted(object state) {
            if ((this.ConvertJsonFunctionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertJsonFunctionCompleted(this, new ConvertJsonFunctionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertJsonFunctionAsync(string _converMethod, string _getString) {
            this.ConvertJsonFunctionAsync(_converMethod, _getString, null);
        }
        
        public void ConvertJsonFunctionAsync(string _converMethod, string _getString, object userState) {
            if ((this.onBeginConvertJsonFunctionDelegate == null)) {
                this.onBeginConvertJsonFunctionDelegate = new BeginOperationDelegate(this.OnBeginConvertJsonFunction);
            }
            if ((this.onEndConvertJsonFunctionDelegate == null)) {
                this.onEndConvertJsonFunctionDelegate = new EndOperationDelegate(this.OnEndConvertJsonFunction);
            }
            if ((this.onConvertJsonFunctionCompletedDelegate == null)) {
                this.onConvertJsonFunctionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertJsonFunctionCompleted);
            }
            base.InvokeAsync(this.onBeginConvertJsonFunctionDelegate, new object[] {
                        _converMethod,
                        _getString}, this.onEndConvertJsonFunctionDelegate, this.onConvertJsonFunctionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.Begininsertloop(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begininsertloop(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void IPS.OntologyService.IOntologyService.Endinsertloop(System.IAsyncResult result) {
            base.Channel.Endinsertloop(result);
        }
        
        private System.IAsyncResult OnBegininsertloop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.OntologyService.IOntologyService)(this)).Begininsertloop(callback, asyncState);
        }
        
        private object[] OnEndinsertloop(System.IAsyncResult result) {
            ((IPS.OntologyService.IOntologyService)(this)).Endinsertloop(result);
            return null;
        }
        
        private void OninsertloopCompleted(object state) {
            if ((this.insertloopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.insertloopCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void insertloopAsync() {
            this.insertloopAsync(null);
        }
        
        public void insertloopAsync(object userState) {
            if ((this.onBegininsertloopDelegate == null)) {
                this.onBegininsertloopDelegate = new BeginOperationDelegate(this.OnBegininsertloop);
            }
            if ((this.onEndinsertloopDelegate == null)) {
                this.onEndinsertloopDelegate = new EndOperationDelegate(this.OnEndinsertloop);
            }
            if ((this.oninsertloopCompletedDelegate == null)) {
                this.oninsertloopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OninsertloopCompleted);
            }
            base.InvokeAsync(this.onBegininsertloopDelegate, null, this.onEndinsertloopDelegate, this.oninsertloopCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginTimeDisplay(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTimeDisplay(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndTimeDisplay(System.IAsyncResult result) {
            return base.Channel.EndTimeDisplay(result);
        }
        
        private System.IAsyncResult OnBeginTimeDisplay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IPS.OntologyService.IOntologyService)(this)).BeginTimeDisplay(callback, asyncState);
        }
        
        private object[] OnEndTimeDisplay(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndTimeDisplay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTimeDisplayCompleted(object state) {
            if ((this.TimeDisplayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TimeDisplayCompleted(this, new TimeDisplayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TimeDisplayAsync() {
            this.TimeDisplayAsync(null);
        }
        
        public void TimeDisplayAsync(object userState) {
            if ((this.onBeginTimeDisplayDelegate == null)) {
                this.onBeginTimeDisplayDelegate = new BeginOperationDelegate(this.OnBeginTimeDisplay);
            }
            if ((this.onEndTimeDisplayDelegate == null)) {
                this.onEndTimeDisplayDelegate = new EndOperationDelegate(this.OnEndTimeDisplay);
            }
            if ((this.onTimeDisplayCompletedDelegate == null)) {
                this.onTimeDisplayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTimeDisplayCompleted);
            }
            base.InvokeAsync(this.onBeginTimeDisplayDelegate, null, this.onEndTimeDisplayDelegate, this.onTimeDisplayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginOntSysTesting(string _userID, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, bool _isLock, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOntSysTesting(_userID, _functionCodeIndicator, _functionData, _round, _totalpeople, _startdate, _starttime, _ta1, _isLock, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndOntSysTesting(System.IAsyncResult result) {
            return base.Channel.EndOntSysTesting(result);
        }
        
        private System.IAsyncResult OnBeginOntSysTesting(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _functionCodeIndicator = ((string)(inValues[1]));
            string _functionData = ((string)(inValues[2]));
            string _round = ((string)(inValues[3]));
            string _totalpeople = ((string)(inValues[4]));
            string _startdate = ((string)(inValues[5]));
            string _starttime = ((string)(inValues[6]));
            string _ta1 = ((string)(inValues[7]));
            bool _isLock = ((bool)(inValues[8]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginOntSysTesting(_userID, _functionCodeIndicator, _functionData, _round, _totalpeople, _startdate, _starttime, _ta1, _isLock, callback, asyncState);
        }
        
        private object[] OnEndOntSysTesting(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndOntSysTesting(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOntSysTestingCompleted(object state) {
            if ((this.OntSysTestingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OntSysTestingCompleted(this, new OntSysTestingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OntSysTestingAsync(string _userID, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, bool _isLock) {
            this.OntSysTestingAsync(_userID, _functionCodeIndicator, _functionData, _round, _totalpeople, _startdate, _starttime, _ta1, _isLock, null);
        }
        
        public void OntSysTestingAsync(string _userID, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, bool _isLock, object userState) {
            if ((this.onBeginOntSysTestingDelegate == null)) {
                this.onBeginOntSysTestingDelegate = new BeginOperationDelegate(this.OnBeginOntSysTesting);
            }
            if ((this.onEndOntSysTestingDelegate == null)) {
                this.onEndOntSysTestingDelegate = new EndOperationDelegate(this.OnEndOntSysTesting);
            }
            if ((this.onOntSysTestingCompletedDelegate == null)) {
                this.onOntSysTestingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOntSysTestingCompleted);
            }
            base.InvokeAsync(this.onBeginOntSysTestingDelegate, new object[] {
                        _userID,
                        _functionCodeIndicator,
                        _functionData,
                        _round,
                        _totalpeople,
                        _startdate,
                        _starttime,
                        _ta1,
                        _isLock}, this.onEndOntSysTestingDelegate, this.onOntSysTestingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginsendTableTestingVersion(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsendTableTestingVersion(_userID, _currentStep, _lastStep, _functionCodeIndicator, _functionData, _round, _totalpeople, _startdate, _starttime, _ta1, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndsendTableTestingVersion(System.IAsyncResult result) {
            return base.Channel.EndsendTableTestingVersion(result);
        }
        
        private System.IAsyncResult OnBeginsendTableTestingVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _currentStep = ((string)(inValues[1]));
            string _lastStep = ((string)(inValues[2]));
            string _functionCodeIndicator = ((string)(inValues[3]));
            string _functionData = ((string)(inValues[4]));
            string _round = ((string)(inValues[5]));
            string _totalpeople = ((string)(inValues[6]));
            string _startdate = ((string)(inValues[7]));
            string _starttime = ((string)(inValues[8]));
            string _ta1 = ((string)(inValues[9]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginsendTableTestingVersion(_userID, _currentStep, _lastStep, _functionCodeIndicator, _functionData, _round, _totalpeople, _startdate, _starttime, _ta1, callback, asyncState);
        }
        
        private object[] OnEndsendTableTestingVersion(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndsendTableTestingVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsendTableTestingVersionCompleted(object state) {
            if ((this.sendTableTestingVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.sendTableTestingVersionCompleted(this, new sendTableTestingVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void sendTableTestingVersionAsync(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1) {
            this.sendTableTestingVersionAsync(_userID, _currentStep, _lastStep, _functionCodeIndicator, _functionData, _round, _totalpeople, _startdate, _starttime, _ta1, null);
        }
        
        public void sendTableTestingVersionAsync(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, object userState) {
            if ((this.onBeginsendTableTestingVersionDelegate == null)) {
                this.onBeginsendTableTestingVersionDelegate = new BeginOperationDelegate(this.OnBeginsendTableTestingVersion);
            }
            if ((this.onEndsendTableTestingVersionDelegate == null)) {
                this.onEndsendTableTestingVersionDelegate = new EndOperationDelegate(this.OnEndsendTableTestingVersion);
            }
            if ((this.onsendTableTestingVersionCompletedDelegate == null)) {
                this.onsendTableTestingVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsendTableTestingVersionCompleted);
            }
            base.InvokeAsync(this.onBeginsendTableTestingVersionDelegate, new object[] {
                        _userID,
                        _currentStep,
                        _lastStep,
                        _functionCodeIndicator,
                        _functionData,
                        _round,
                        _totalpeople,
                        _startdate,
                        _starttime,
                        _ta1}, this.onEndsendTableTestingVersionDelegate, this.onsendTableTestingVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BegingetTableTestingVersion(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, bool isMatchData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTableTestingVersion(_userID, _currentStep, _lastStep, _functionCodeIndicator, _round, _totalpeople, _startdate, isMatchData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndgetTableTestingVersion(System.IAsyncResult result) {
            return base.Channel.EndgetTableTestingVersion(result);
        }
        
        private System.IAsyncResult OnBegingetTableTestingVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userID = ((string)(inValues[0]));
            string _currentStep = ((string)(inValues[1]));
            string _lastStep = ((string)(inValues[2]));
            string _functionCodeIndicator = ((string)(inValues[3]));
            string _round = ((string)(inValues[4]));
            string _totalpeople = ((string)(inValues[5]));
            string _startdate = ((string)(inValues[6]));
            bool isMatchData = ((bool)(inValues[7]));
            return ((IPS.OntologyService.IOntologyService)(this)).BegingetTableTestingVersion(_userID, _currentStep, _lastStep, _functionCodeIndicator, _round, _totalpeople, _startdate, isMatchData, callback, asyncState);
        }
        
        private object[] OnEndgetTableTestingVersion(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndgetTableTestingVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTableTestingVersionCompleted(object state) {
            if ((this.getTableTestingVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTableTestingVersionCompleted(this, new getTableTestingVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTableTestingVersionAsync(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, bool isMatchData) {
            this.getTableTestingVersionAsync(_userID, _currentStep, _lastStep, _functionCodeIndicator, _round, _totalpeople, _startdate, isMatchData, null);
        }
        
        public void getTableTestingVersionAsync(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, bool isMatchData, object userState) {
            if ((this.onBegingetTableTestingVersionDelegate == null)) {
                this.onBegingetTableTestingVersionDelegate = new BeginOperationDelegate(this.OnBegingetTableTestingVersion);
            }
            if ((this.onEndgetTableTestingVersionDelegate == null)) {
                this.onEndgetTableTestingVersionDelegate = new EndOperationDelegate(this.OnEndgetTableTestingVersion);
            }
            if ((this.ongetTableTestingVersionCompletedDelegate == null)) {
                this.ongetTableTestingVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTableTestingVersionCompleted);
            }
            base.InvokeAsync(this.onBegingetTableTestingVersionDelegate, new object[] {
                        _userID,
                        _currentStep,
                        _lastStep,
                        _functionCodeIndicator,
                        _round,
                        _totalpeople,
                        _startdate,
                        isMatchData}, this.onEndgetTableTestingVersionDelegate, this.ongetTableTestingVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IPS.OntologyService.IOntologyService.BeginupdateTableTestingVersion(string _userNume, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, string result, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateTableTestingVersion(_userNume, _currentStep, _lastStep, _functionCodeIndicator, _round, _totalpeople, _startdate, result, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string IPS.OntologyService.IOntologyService.EndupdateTableTestingVersion(System.IAsyncResult result) {
            return base.Channel.EndupdateTableTestingVersion(result);
        }
        
        private System.IAsyncResult OnBeginupdateTableTestingVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string _userNume = ((string)(inValues[0]));
            string _currentStep = ((string)(inValues[1]));
            string _lastStep = ((string)(inValues[2]));
            string _functionCodeIndicator = ((string)(inValues[3]));
            string _round = ((string)(inValues[4]));
            string _totalpeople = ((string)(inValues[5]));
            string _startdate = ((string)(inValues[6]));
            string result = ((string)(inValues[7]));
            return ((IPS.OntologyService.IOntologyService)(this)).BeginupdateTableTestingVersion(_userNume, _currentStep, _lastStep, _functionCodeIndicator, _round, _totalpeople, _startdate, result, callback, asyncState);
        }
        
        private object[] OnEndupdateTableTestingVersion(System.IAsyncResult result) {
            string retVal = ((IPS.OntologyService.IOntologyService)(this)).EndupdateTableTestingVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnupdateTableTestingVersionCompleted(object state) {
            if ((this.updateTableTestingVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateTableTestingVersionCompleted(this, new updateTableTestingVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateTableTestingVersionAsync(string _userNume, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, string result) {
            this.updateTableTestingVersionAsync(_userNume, _currentStep, _lastStep, _functionCodeIndicator, _round, _totalpeople, _startdate, result, null);
        }
        
        public void updateTableTestingVersionAsync(string _userNume, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, string result, object userState) {
            if ((this.onBeginupdateTableTestingVersionDelegate == null)) {
                this.onBeginupdateTableTestingVersionDelegate = new BeginOperationDelegate(this.OnBeginupdateTableTestingVersion);
            }
            if ((this.onEndupdateTableTestingVersionDelegate == null)) {
                this.onEndupdateTableTestingVersionDelegate = new EndOperationDelegate(this.OnEndupdateTableTestingVersion);
            }
            if ((this.onupdateTableTestingVersionCompletedDelegate == null)) {
                this.onupdateTableTestingVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateTableTestingVersionCompleted);
            }
            base.InvokeAsync(this.onBeginupdateTableTestingVersionDelegate, new object[] {
                        _userNume,
                        _currentStep,
                        _lastStep,
                        _functionCodeIndicator,
                        _round,
                        _totalpeople,
                        _startdate,
                        result}, this.onEndupdateTableTestingVersionDelegate, this.onupdateTableTestingVersionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IPS.OntologyService.IOntologyService CreateChannel() {
            return new OntologyServiceClientChannel(this);
        }
        
        private class OntologyServiceClientChannel : ChannelBase<IPS.OntologyService.IOntologyService>, IPS.OntologyService.IOntologyService {
            
            public OntologyServiceClientChannel(System.ServiceModel.ClientBase<IPS.OntologyService.IOntologyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("GetData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataUsingDataContract(IPS.OntologyService.CompositeType composite, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = composite;
                System.IAsyncResult _result = base.BeginInvoke("GetDataUsingDataContract", _args, callback, asyncState);
                return _result;
            }
            
            public IPS.OntologyService.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                IPS.OntologyService.CompositeType _result = ((IPS.OntologyService.CompositeType)(base.EndInvoke("GetDataUsingDataContract", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsendTable(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = _userID;
                _args[1] = _currentstep;
                _args[2] = _laststep;
                _args[3] = _functionCodeIndicator;
                _args[4] = _functionData;
                System.IAsyncResult _result = base.BeginInvoke("sendTable", _args, callback, asyncState);
                return _result;
            }
            
            public string EndsendTable(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("sendTable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetTable(string _userID, string _currentstep, string _laststep, string _functionCodeIndicator, string _functionData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = _userID;
                _args[1] = _currentstep;
                _args[2] = _laststep;
                _args[3] = _functionCodeIndicator;
                _args[4] = _functionData;
                System.IAsyncResult _result = base.BeginInvoke("getTable", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetTable(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getTable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOntologySystemInterface(string _userID, string _method, string _getString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = _userID;
                _args[1] = _method;
                _args[2] = _getString;
                System.IAsyncResult _result = base.BeginInvoke("OntologySystemInterface", _args, callback, asyncState);
                return _result;
            }
            
            public string EndOntologySystemInterface(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("OntologySystemInterface", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConvertJsonFunction(string _converMethod, string _getString, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = _converMethod;
                _args[1] = _getString;
                System.IAsyncResult _result = base.BeginInvoke("ConvertJsonFunction", _args, callback, asyncState);
                return _result;
            }
            
            public string EndConvertJsonFunction(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ConvertJsonFunction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begininsertloop(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("insertloop", _args, callback, asyncState);
                return _result;
            }
            
            public void Endinsertloop(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("insertloop", _args, result);
            }
            
            public System.IAsyncResult BeginTimeDisplay(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TimeDisplay", _args, callback, asyncState);
                return _result;
            }
            
            public string EndTimeDisplay(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("TimeDisplay", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOntSysTesting(string _userID, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, bool _isLock, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = _userID;
                _args[1] = _functionCodeIndicator;
                _args[2] = _functionData;
                _args[3] = _round;
                _args[4] = _totalpeople;
                _args[5] = _startdate;
                _args[6] = _starttime;
                _args[7] = _ta1;
                _args[8] = _isLock;
                System.IAsyncResult _result = base.BeginInvoke("OntSysTesting", _args, callback, asyncState);
                return _result;
            }
            
            public string EndOntSysTesting(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("OntSysTesting", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsendTableTestingVersion(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _functionData, string _round, string _totalpeople, string _startdate, string _starttime, string _ta1, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = _userID;
                _args[1] = _currentStep;
                _args[2] = _lastStep;
                _args[3] = _functionCodeIndicator;
                _args[4] = _functionData;
                _args[5] = _round;
                _args[6] = _totalpeople;
                _args[7] = _startdate;
                _args[8] = _starttime;
                _args[9] = _ta1;
                System.IAsyncResult _result = base.BeginInvoke("sendTableTestingVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndsendTableTestingVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("sendTableTestingVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetTableTestingVersion(string _userID, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, bool isMatchData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = _userID;
                _args[1] = _currentStep;
                _args[2] = _lastStep;
                _args[3] = _functionCodeIndicator;
                _args[4] = _round;
                _args[5] = _totalpeople;
                _args[6] = _startdate;
                _args[7] = isMatchData;
                System.IAsyncResult _result = base.BeginInvoke("getTableTestingVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetTableTestingVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getTableTestingVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginupdateTableTestingVersion(string _userNume, string _currentStep, string _lastStep, string _functionCodeIndicator, string _round, string _totalpeople, string _startdate, string result, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = _userNume;
                _args[1] = _currentStep;
                _args[2] = _lastStep;
                _args[3] = _functionCodeIndicator;
                _args[4] = _round;
                _args[5] = _totalpeople;
                _args[6] = _startdate;
                _args[7] = result;
                System.IAsyncResult _result = base.BeginInvoke("updateTableTestingVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndupdateTableTestingVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("updateTableTestingVersion", _args, result)));
                return _result;
            }
        }
    }
}
