//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18444
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrivateWorker.FileUploadService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadFile", Namespace="http://schemas.datacontract.org/2004/07/FileUploadService")]
    [System.SerializableAttribute()]
    public partial class UploadFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] FileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] File {
            get {
                return this.FileField;
            }
            set {
                if ((object.ReferenceEquals(this.FileField, value) != true)) {
                    this.FileField = value;
                    this.RaisePropertyChanged("File");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadFileInfo", Namespace="http://schemas.datacontract.org/2004/07/FileUploadService")]
    [System.SerializableAttribute()]
    public partial class UploadFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileStoreUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileStoreUrl {
            get {
                return this.FileStoreUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileStoreUrlField, value) != true)) {
                    this.FileStoreUrlField = value;
                    this.RaisePropertyChanged("FileStoreUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploadService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        // CODEGEN: 訊息 FileUploadMessage 的包裝函式名稱 (FileUploadMessage) 與預設值 (SaveFile) 不符，正在產生訊息合約
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveFile", ReplyAction="http://tempuri.org/IService1/SaveFileResponse")]
        PrivateWorker.FileUploadService.FileUploadMessage SaveFile(PrivateWorker.FileUploadService.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFileData", ReplyAction="http://tempuri.org/IService1/GetFileDataResponse")]
        string GetFileData(PrivateWorker.FileUploadService.UploadFile value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveFile2", ReplyAction="http://tempuri.org/IService1/SaveFile2Response")]
        string SaveFile2(PrivateWorker.FileUploadService.UploadFile uploadFile, string createName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DoUpload", ReplyAction="http://tempuri.org/IService1/DoUploadResponse")]
        PrivateWorker.FileUploadService.UploadFileInfo DoUpload(string filename, byte[] content, bool append, string createFolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActionUpload", ReplyAction="http://tempuri.org/IService1/ActionUploadResponse")]
        void ActionUpload(string fileName, byte[] fileContext, bool isAppend, string createFolderName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileData;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string FileName, System.IO.Stream FileData) {
            this.FileName = FileName;
            this.FileData = FileData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : PrivateWorker.FileUploadService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<PrivateWorker.FileUploadService.IService1>, PrivateWorker.FileUploadService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PrivateWorker.FileUploadService.FileUploadMessage PrivateWorker.FileUploadService.IService1.SaveFile(PrivateWorker.FileUploadService.FileUploadMessage request) {
            return base.Channel.SaveFile(request);
        }
        
        public void SaveFile(ref string FileName, ref System.IO.Stream FileData) {
            PrivateWorker.FileUploadService.FileUploadMessage inValue = new PrivateWorker.FileUploadService.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.FileData = FileData;
            PrivateWorker.FileUploadService.FileUploadMessage retVal = ((PrivateWorker.FileUploadService.IService1)(this)).SaveFile(inValue);
            FileName = retVal.FileName;
            FileData = retVal.FileData;
        }
        
        public string GetFileData(PrivateWorker.FileUploadService.UploadFile value) {
            return base.Channel.GetFileData(value);
        }
        
        public string SaveFile2(PrivateWorker.FileUploadService.UploadFile uploadFile, string createName) {
            return base.Channel.SaveFile2(uploadFile, createName);
        }
        
        public PrivateWorker.FileUploadService.UploadFileInfo DoUpload(string filename, byte[] content, bool append, string createFolderName) {
            return base.Channel.DoUpload(filename, content, append, createFolderName);
        }
        
        public void ActionUpload(string fileName, byte[] fileContext, bool isAppend, string createFolderName) {
            base.Channel.ActionUpload(fileName, fileContext, isAppend, createFolderName);
        }
    }
}
